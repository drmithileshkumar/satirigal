import {
  KEY,
  isNavigationEvent,
  normalizeKey
} from "./chunk-LM6G6BDY.js";
import {
  MDCRipple,
  MDCRippleFoundation
} from "./chunk-I52LNARA.js";
import {
  closest
} from "./chunk-7TL3QSXI.js";
import {
  MDCComponent,
  MDCFoundation,
  __assign,
  __extends,
  __read,
  __values
} from "./chunk-E3PZ3JEK.js";
import {
  __export
} from "./chunk-5WWUZCGV.js";

// node_modules/@material/chips/action/component-ripple.js
function computePrimaryActionRippleClientRect(clientRect, graphicSelectedWidthStyleValue) {
  var graphicWidth = Number(graphicSelectedWidthStyleValue.replace("px", ""));
  if (Number.isNaN(graphicWidth)) {
    return clientRect;
  }
  return {
    width: clientRect.width + graphicWidth,
    height: clientRect.height,
    top: clientRect.top,
    right: clientRect.right,
    bottom: clientRect.bottom,
    left: clientRect.left
  };
}
var GRAPHIC_SELECTED_WIDTH_STYLE_PROP = "--mdc-chip-graphic-selected-width";

// node_modules/@material/chips/action/constants.js
var MDCChipActionCssClasses;
(function(MDCChipActionCssClasses2) {
  MDCChipActionCssClasses2["PRIMARY_ACTION"] = "mdc-evolution-chip__action--primary";
  MDCChipActionCssClasses2["TRAILING_ACTION"] = "mdc-evolution-chip__action--trailing";
  MDCChipActionCssClasses2["CHIP_ROOT"] = "mdc-evolution-chip";
})(MDCChipActionCssClasses || (MDCChipActionCssClasses = {}));
var MDCChipActionInteractionTrigger;
(function(MDCChipActionInteractionTrigger2) {
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["CLICK"] = 1] = "CLICK";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["BACKSPACE_KEY"] = 2] = "BACKSPACE_KEY";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["DELETE_KEY"] = 3] = "DELETE_KEY";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["SPACEBAR_KEY"] = 4] = "SPACEBAR_KEY";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["ENTER_KEY"] = 5] = "ENTER_KEY";
})(MDCChipActionInteractionTrigger || (MDCChipActionInteractionTrigger = {}));
var MDCChipActionType;
(function(MDCChipActionType2) {
  MDCChipActionType2[MDCChipActionType2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  MDCChipActionType2[MDCChipActionType2["PRIMARY"] = 1] = "PRIMARY";
  MDCChipActionType2[MDCChipActionType2["TRAILING"] = 2] = "TRAILING";
})(MDCChipActionType || (MDCChipActionType = {}));
var MDCChipActionEvents;
(function(MDCChipActionEvents2) {
  MDCChipActionEvents2["INTERACTION"] = "MDCChipAction:interaction";
  MDCChipActionEvents2["NAVIGATION"] = "MDCChipAction:navigation";
})(MDCChipActionEvents || (MDCChipActionEvents = {}));
var MDCChipActionFocusBehavior;
(function(MDCChipActionFocusBehavior2) {
  MDCChipActionFocusBehavior2[MDCChipActionFocusBehavior2["FOCUSABLE"] = 0] = "FOCUSABLE";
  MDCChipActionFocusBehavior2[MDCChipActionFocusBehavior2["FOCUSABLE_AND_FOCUSED"] = 1] = "FOCUSABLE_AND_FOCUSED";
  MDCChipActionFocusBehavior2[MDCChipActionFocusBehavior2["NOT_FOCUSABLE"] = 2] = "NOT_FOCUSABLE";
})(MDCChipActionFocusBehavior || (MDCChipActionFocusBehavior = {}));
var MDCChipActionAttributes;
(function(MDCChipActionAttributes2) {
  MDCChipActionAttributes2["ARIA_DISABLED"] = "aria-disabled";
  MDCChipActionAttributes2["ARIA_HIDDEN"] = "aria-hidden";
  MDCChipActionAttributes2["ARIA_SELECTED"] = "aria-selected";
  MDCChipActionAttributes2["DATA_DELETABLE"] = "data-mdc-deletable";
  MDCChipActionAttributes2["DISABLED"] = "disabled";
  MDCChipActionAttributes2["ROLE"] = "role";
  MDCChipActionAttributes2["TAB_INDEX"] = "tabindex";
})(MDCChipActionAttributes || (MDCChipActionAttributes = {}));

// node_modules/@material/chips/action/foundation.js
var triggerMap = /* @__PURE__ */ new Map();
triggerMap.set(KEY.SPACEBAR, MDCChipActionInteractionTrigger.SPACEBAR_KEY);
triggerMap.set(KEY.ENTER, MDCChipActionInteractionTrigger.ENTER_KEY);
triggerMap.set(KEY.DELETE, MDCChipActionInteractionTrigger.DELETE_KEY);
triggerMap.set(KEY.BACKSPACE, MDCChipActionInteractionTrigger.BACKSPACE_KEY);
var MDCChipActionFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipActionFoundation2, _super);
    function MDCChipActionFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCChipActionFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCChipActionFoundation2, "defaultAdapter", {
      get: function() {
        return {
          emitEvent: function() {
            return void 0;
          },
          focus: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getElementID: function() {
            return "";
          },
          removeAttribute: function() {
            return void 0;
          },
          setAttribute: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipActionFoundation2.prototype.handleClick = function() {
      if (this.isDisabled())
        return;
      this.emitInteraction(MDCChipActionInteractionTrigger.CLICK);
    };
    MDCChipActionFoundation2.prototype.handleKeydown = function(event) {
      var key = normalizeKey(event);
      if (this.shouldNotifyInteractionFromKey(key)) {
        event.preventDefault();
        this.emitInteraction(this.getTriggerFromKey(key));
        return;
      }
      if (isNavigationEvent(event)) {
        event.preventDefault();
        this.emitNavigation(key);
        return;
      }
    };
    MDCChipActionFoundation2.prototype.setDisabled = function(isDisabled) {
      if (this.isSelectable()) {
        this.adapter.setAttribute(MDCChipActionAttributes.ARIA_DISABLED, "" + isDisabled);
        return;
      }
      if (isDisabled) {
        this.adapter.setAttribute(MDCChipActionAttributes.DISABLED, "true");
      } else {
        this.adapter.removeAttribute(MDCChipActionAttributes.DISABLED);
      }
    };
    MDCChipActionFoundation2.prototype.isDisabled = function() {
      if (this.adapter.getAttribute(MDCChipActionAttributes.ARIA_DISABLED) === "true") {
        return true;
      }
      if (this.adapter.getAttribute(MDCChipActionAttributes.DISABLED) !== null) {
        return true;
      }
      return false;
    };
    MDCChipActionFoundation2.prototype.setFocus = function(behavior) {
      if (!this.isFocusable()) {
        return;
      }
      if (behavior === MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED) {
        this.adapter.setAttribute(MDCChipActionAttributes.TAB_INDEX, "0");
        this.adapter.focus();
        return;
      }
      if (behavior === MDCChipActionFocusBehavior.FOCUSABLE) {
        this.adapter.setAttribute(MDCChipActionAttributes.TAB_INDEX, "0");
        return;
      }
      if (behavior === MDCChipActionFocusBehavior.NOT_FOCUSABLE) {
        this.adapter.setAttribute(MDCChipActionAttributes.TAB_INDEX, "-1");
        return;
      }
    };
    MDCChipActionFoundation2.prototype.isFocusable = function() {
      if (this.isDisabled()) {
        return false;
      }
      if (this.adapter.getAttribute(MDCChipActionAttributes.ARIA_HIDDEN) === "true") {
        return false;
      }
      return true;
    };
    MDCChipActionFoundation2.prototype.setSelected = function(isSelected) {
      if (!this.isSelectable()) {
        return;
      }
      this.adapter.setAttribute(MDCChipActionAttributes.ARIA_SELECTED, "" + isSelected);
    };
    MDCChipActionFoundation2.prototype.isSelected = function() {
      return this.adapter.getAttribute(MDCChipActionAttributes.ARIA_SELECTED) === "true";
    };
    MDCChipActionFoundation2.prototype.emitInteraction = function(trigger) {
      this.adapter.emitEvent(MDCChipActionEvents.INTERACTION, {
        actionID: this.adapter.getElementID(),
        source: this.actionType(),
        trigger
      });
    };
    MDCChipActionFoundation2.prototype.emitNavigation = function(key) {
      this.adapter.emitEvent(MDCChipActionEvents.NAVIGATION, {
        source: this.actionType(),
        key
      });
    };
    MDCChipActionFoundation2.prototype.shouldNotifyInteractionFromKey = function(key) {
      var isFromActionKey = key === KEY.ENTER || key === KEY.SPACEBAR;
      var isFromRemoveKey = key === KEY.BACKSPACE || key === KEY.DELETE;
      if (isFromActionKey) {
        return true;
      }
      if (isFromRemoveKey && this.shouldEmitInteractionOnRemoveKey()) {
        return true;
      }
      return false;
    };
    MDCChipActionFoundation2.prototype.getTriggerFromKey = function(key) {
      var trigger = triggerMap.get(key);
      if (trigger) {
        return trigger;
      }
      return MDCChipActionInteractionTrigger.UNSPECIFIED;
    };
    return MDCChipActionFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/chips/action/primary-foundation.js
var MDCChipPrimaryActionFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipPrimaryActionFoundation2, _super);
    function MDCChipPrimaryActionFoundation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipPrimaryActionFoundation2.prototype.isSelectable = function() {
      return this.adapter.getAttribute(MDCChipActionAttributes.ROLE) === "option";
    };
    MDCChipPrimaryActionFoundation2.prototype.actionType = function() {
      return MDCChipActionType.PRIMARY;
    };
    MDCChipPrimaryActionFoundation2.prototype.shouldEmitInteractionOnRemoveKey = function() {
      return this.adapter.getAttribute(MDCChipActionAttributes.DATA_DELETABLE) === "true";
    };
    return MDCChipPrimaryActionFoundation2;
  }(MDCChipActionFoundation)
);

// node_modules/@material/chips/action/trailing-foundation.js
var MDCChipTrailingActionFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipTrailingActionFoundation3, _super);
    function MDCChipTrailingActionFoundation3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipTrailingActionFoundation3.prototype.isSelectable = function() {
      return false;
    };
    MDCChipTrailingActionFoundation3.prototype.actionType = function() {
      return MDCChipActionType.TRAILING;
    };
    MDCChipTrailingActionFoundation3.prototype.shouldEmitInteractionOnRemoveKey = function() {
      return true;
    };
    return MDCChipTrailingActionFoundation3;
  }(MDCChipActionFoundation)
);

// node_modules/@material/chips/action/component.js
var MDCChipAction = (
  /** @class */
  function(_super) {
    __extends(MDCChipAction2, _super);
    function MDCChipAction2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.rootHTML = _this.root;
      return _this;
    }
    MDCChipAction2.attachTo = function(root) {
      return new MDCChipAction2(root);
    };
    Object.defineProperty(MDCChipAction2.prototype, "ripple", {
      get: function() {
        return this.rippleInstance;
      },
      enumerable: false,
      configurable: true
    });
    MDCChipAction2.prototype.initialize = function(rippleFactory) {
      var _this = this;
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      var rippleAdapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function() {
        return _this.computeRippleClientRect();
      } });
      this.rippleInstance = rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
    };
    MDCChipAction2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleClick = function() {
        _this.foundation.handleClick();
      };
      this.handleKeydown = function(event) {
        _this.foundation.handleKeydown(event);
      };
      this.listen("click", this.handleClick);
      this.listen("keydown", this.handleKeydown);
    };
    MDCChipAction2.prototype.destroy = function() {
      this.ripple.destroy();
      this.unlisten("click", this.handleClick);
      this.unlisten("keydown", this.handleKeydown);
      _super.prototype.destroy.call(this);
    };
    MDCChipAction2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        emitEvent: function(eventName, eventDetail) {
          _this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        focus: function() {
          _this.rootHTML.focus();
        },
        getAttribute: function(attrName) {
          return _this.root.getAttribute(attrName);
        },
        getElementID: function() {
          return _this.root.id;
        },
        removeAttribute: function(name) {
          _this.root.removeAttribute(name);
        },
        setAttribute: function(name, value) {
          _this.root.setAttribute(name, value);
        }
      };
      if (this.root.classList.contains(MDCChipActionCssClasses.TRAILING_ACTION)) {
        return new MDCChipTrailingActionFoundation(adapter);
      }
      return new MDCChipPrimaryActionFoundation(adapter);
    };
    MDCChipAction2.prototype.setDisabled = function(isDisabled) {
      this.foundation.setDisabled(isDisabled);
    };
    MDCChipAction2.prototype.isDisabled = function() {
      return this.foundation.isDisabled();
    };
    MDCChipAction2.prototype.setFocus = function(behavior) {
      this.foundation.setFocus(behavior);
    };
    MDCChipAction2.prototype.isFocusable = function() {
      return this.foundation.isFocusable();
    };
    MDCChipAction2.prototype.setSelected = function(isSelected) {
      this.foundation.setSelected(isSelected);
    };
    MDCChipAction2.prototype.isSelected = function() {
      return this.foundation.isSelected();
    };
    MDCChipAction2.prototype.isSelectable = function() {
      return this.foundation.isSelectable();
    };
    MDCChipAction2.prototype.actionType = function() {
      return this.foundation.actionType();
    };
    MDCChipAction2.prototype.computeRippleClientRect = function() {
      if (this.root.classList.contains(MDCChipActionCssClasses.PRIMARY_ACTION)) {
        var chipRoot = closest(this.root, "." + MDCChipActionCssClasses.CHIP_ROOT);
        if (!chipRoot)
          return this.root.getBoundingClientRect();
        var graphicWidth = window.getComputedStyle(chipRoot).getPropertyValue(GRAPHIC_SELECTED_WIDTH_STYLE_PROP);
        return computePrimaryActionRippleClientRect(chipRoot.getBoundingClientRect(), graphicWidth);
      }
      return this.root.getBoundingClientRect();
    };
    return MDCChipAction2;
  }(MDCComponent)
);

// node_modules/@material/animation/animationframe.js
var AnimationFrame = (
  /** @class */
  function() {
    function AnimationFrame2() {
      this.rafIDs = /* @__PURE__ */ new Map();
    }
    AnimationFrame2.prototype.request = function(key, callback) {
      var _this = this;
      this.cancel(key);
      var frameID = requestAnimationFrame(function(frame) {
        _this.rafIDs.delete(key);
        callback(frame);
      });
      this.rafIDs.set(key, frameID);
    };
    AnimationFrame2.prototype.cancel = function(key) {
      var rafID = this.rafIDs.get(key);
      if (rafID) {
        cancelAnimationFrame(rafID);
        this.rafIDs.delete(key);
      }
    };
    AnimationFrame2.prototype.cancelAll = function() {
      var _this = this;
      this.rafIDs.forEach(function(_, key) {
        _this.cancel(key);
      });
    };
    AnimationFrame2.prototype.getQueue = function() {
      var queue = [];
      this.rafIDs.forEach(function(_, key) {
        queue.push(key);
      });
      return queue;
    };
    return AnimationFrame2;
  }()
);

// node_modules/@material/chips/chip/constants.js
var MDCChipCssClasses;
(function(MDCChipCssClasses2) {
  MDCChipCssClasses2["SELECTING"] = "mdc-evolution-chip--selecting";
  MDCChipCssClasses2["DESELECTING"] = "mdc-evolution-chip--deselecting";
  MDCChipCssClasses2["SELECTING_WITH_PRIMARY_ICON"] = "mdc-evolution-chip--selecting-with-primary-icon";
  MDCChipCssClasses2["DESELECTING_WITH_PRIMARY_ICON"] = "mdc-evolution-chip--deselecting-with-primary-icon";
  MDCChipCssClasses2["DISABLED"] = "mdc-evolution-chip--disabled";
  MDCChipCssClasses2["ENTER"] = "mdc-evolution-chip--enter";
  MDCChipCssClasses2["EXIT"] = "mdc-evolution-chip--exit";
  MDCChipCssClasses2["SELECTED"] = "mdc-evolution-chip--selected";
  MDCChipCssClasses2["HIDDEN"] = "mdc-evolution-chip--hidden";
  MDCChipCssClasses2["WITH_PRIMARY_ICON"] = "mdc-evolution-chip--with-primary-icon";
})(MDCChipCssClasses || (MDCChipCssClasses = {}));
var MDCChipEvents;
(function(MDCChipEvents2) {
  MDCChipEvents2["INTERACTION"] = "MDCChip:interaction";
  MDCChipEvents2["NAVIGATION"] = "MDCChip:navigation";
  MDCChipEvents2["ANIMATION"] = "MDCChip:animation";
})(MDCChipEvents || (MDCChipEvents = {}));
var MDCChipAttributes;
(function(MDCChipAttributes2) {
  MDCChipAttributes2["DATA_REMOVED_ANNOUNCEMENT"] = "data-mdc-removed-announcement";
  MDCChipAttributes2["DATA_ADDED_ANNOUNCEMENT"] = "data-mdc-added-announcement";
})(MDCChipAttributes || (MDCChipAttributes = {}));
var MDCChipAnimation;
(function(MDCChipAnimation2) {
  MDCChipAnimation2["ENTER"] = "mdc-evolution-chip-enter";
  MDCChipAnimation2["EXIT"] = "mdc-evolution-chip-exit";
})(MDCChipAnimation || (MDCChipAnimation = {}));

// node_modules/@material/chips/chip/foundation.js
var Direction;
(function(Direction3) {
  Direction3[Direction3["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  Direction3[Direction3["LEFT"] = 1] = "LEFT";
  Direction3[Direction3["RIGHT"] = 2] = "RIGHT";
})(Direction || (Direction = {}));
var AnimationKeys;
(function(AnimationKeys2) {
  AnimationKeys2["SELECTION"] = "selection";
  AnimationKeys2["EXIT"] = "exit";
})(AnimationKeys || (AnimationKeys = {}));
var MDCChipFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipFoundation3, _super);
    function MDCChipFoundation3(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCChipFoundation3.defaultAdapter), adapter)) || this;
      _this.animFrame = new AnimationFrame();
      return _this;
    }
    Object.defineProperty(MDCChipFoundation3, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          emitEvent: function() {
            return void 0;
          },
          getActions: function() {
            return [];
          },
          getAttribute: function() {
            return null;
          },
          getElementID: function() {
            return "";
          },
          getOffsetWidth: function() {
            return 0;
          },
          hasClass: function() {
            return false;
          },
          isActionDisabled: function() {
            return false;
          },
          isActionFocusable: function() {
            return false;
          },
          isActionSelectable: function() {
            return false;
          },
          isActionSelected: function() {
            return false;
          },
          isRTL: function() {
            return false;
          },
          removeClass: function() {
            return void 0;
          },
          setActionDisabled: function() {
            return void 0;
          },
          setActionFocus: function() {
            return void 0;
          },
          setActionSelected: function() {
            return void 0;
          },
          setStyleProperty: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipFoundation3.prototype.destroy = function() {
      this.animFrame.cancelAll();
    };
    MDCChipFoundation3.prototype.getElementID = function() {
      return this.adapter.getElementID();
    };
    MDCChipFoundation3.prototype.setDisabled = function(isDisabled) {
      var e_1, _a2;
      var actions = this.getActions();
      try {
        for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
          var action = actions_1_1.value;
          this.adapter.setActionDisabled(action, isDisabled);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (actions_1_1 && !actions_1_1.done && (_a2 = actions_1.return))
            _a2.call(actions_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      if (isDisabled) {
        this.adapter.addClass(MDCChipCssClasses.DISABLED);
      } else {
        this.adapter.removeClass(MDCChipCssClasses.DISABLED);
      }
    };
    MDCChipFoundation3.prototype.isDisabled = function() {
      var e_2, _a2;
      var actions = this.getActions();
      try {
        for (var actions_2 = __values(actions), actions_2_1 = actions_2.next(); !actions_2_1.done; actions_2_1 = actions_2.next()) {
          var action = actions_2_1.value;
          if (this.adapter.isActionDisabled(action)) {
            return true;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (actions_2_1 && !actions_2_1.done && (_a2 = actions_2.return))
            _a2.call(actions_2);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return false;
    };
    MDCChipFoundation3.prototype.getActions = function() {
      return this.adapter.getActions();
    };
    MDCChipFoundation3.prototype.isActionFocusable = function(action) {
      return this.adapter.isActionFocusable(action);
    };
    MDCChipFoundation3.prototype.isActionSelectable = function(action) {
      return this.adapter.isActionSelectable(action);
    };
    MDCChipFoundation3.prototype.isActionSelected = function(action) {
      return this.adapter.isActionSelected(action);
    };
    MDCChipFoundation3.prototype.setActionFocus = function(action, focus) {
      this.adapter.setActionFocus(action, focus);
    };
    MDCChipFoundation3.prototype.setActionSelected = function(action, isSelected) {
      this.adapter.setActionSelected(action, isSelected);
      this.animateSelection(isSelected);
    };
    MDCChipFoundation3.prototype.startAnimation = function(animation) {
      if (animation === MDCChipAnimation.ENTER) {
        this.adapter.addClass(MDCChipCssClasses.ENTER);
        return;
      }
      if (animation === MDCChipAnimation.EXIT) {
        this.adapter.addClass(MDCChipCssClasses.EXIT);
        return;
      }
    };
    MDCChipFoundation3.prototype.handleAnimationEnd = function(event) {
      var _this = this;
      var animationName = event.animationName;
      if (animationName === MDCChipAnimation.ENTER) {
        this.adapter.removeClass(MDCChipCssClasses.ENTER);
        this.adapter.emitEvent(MDCChipEvents.ANIMATION, {
          chipID: this.getElementID(),
          animation: MDCChipAnimation.ENTER,
          addedAnnouncement: this.getAddedAnnouncement(),
          isComplete: true
        });
        return;
      }
      if (animationName === MDCChipAnimation.EXIT) {
        this.adapter.removeClass(MDCChipCssClasses.EXIT);
        this.adapter.addClass(MDCChipCssClasses.HIDDEN);
        var width = this.adapter.getOffsetWidth();
        this.adapter.setStyleProperty("width", width + "px");
        this.animFrame.request(AnimationKeys.EXIT, function() {
          _this.animFrame.request(AnimationKeys.EXIT, function() {
            _this.adapter.setStyleProperty("width", "0");
          });
        });
      }
    };
    MDCChipFoundation3.prototype.handleTransitionEnd = function() {
      if (!this.adapter.hasClass(MDCChipCssClasses.HIDDEN))
        return;
      this.adapter.emitEvent(MDCChipEvents.ANIMATION, {
        chipID: this.getElementID(),
        animation: MDCChipAnimation.EXIT,
        removedAnnouncement: this.getRemovedAnnouncement(),
        isComplete: true
      });
    };
    MDCChipFoundation3.prototype.handleActionInteraction = function(_a2) {
      var detail = _a2.detail;
      var source = detail.source, actionID = detail.actionID;
      var isSelectable = this.adapter.isActionSelectable(source);
      var isSelected = this.adapter.isActionSelected(source);
      this.adapter.emitEvent(MDCChipEvents.INTERACTION, {
        chipID: this.getElementID(),
        shouldRemove: this.shouldRemove(detail),
        actionID,
        isSelectable,
        isSelected,
        source
      });
    };
    MDCChipFoundation3.prototype.handleActionNavigation = function(_a2) {
      var detail = _a2.detail;
      var source = detail.source, key = detail.key;
      var isRTL = this.adapter.isRTL();
      var isTrailingActionFocusable = this.adapter.isActionFocusable(MDCChipActionType.TRAILING);
      var isPrimaryActionFocusable = this.adapter.isActionFocusable(MDCChipActionType.PRIMARY);
      var dir = this.directionFromKey(key, isRTL);
      var shouldNavigateToTrailing = source === MDCChipActionType.PRIMARY && dir === Direction.RIGHT && isTrailingActionFocusable;
      var shouldNavigateToPrimary = source === MDCChipActionType.TRAILING && dir === Direction.LEFT && isPrimaryActionFocusable;
      if (shouldNavigateToTrailing) {
        this.navigateActions({ from: source, to: MDCChipActionType.TRAILING });
        return;
      }
      if (shouldNavigateToPrimary) {
        this.navigateActions({ from: source, to: MDCChipActionType.PRIMARY });
        return;
      }
      this.adapter.emitEvent(MDCChipEvents.NAVIGATION, {
        chipID: this.getElementID(),
        isRTL,
        source,
        key
      });
    };
    MDCChipFoundation3.prototype.directionFromKey = function(key, isRTL) {
      var isLeftKey = key === KEY.ARROW_LEFT;
      var isRightKey = key === KEY.ARROW_RIGHT;
      if (!isRTL && isLeftKey || isRTL && isRightKey) {
        return Direction.LEFT;
      }
      if (!isRTL && isRightKey || isRTL && isLeftKey) {
        return Direction.RIGHT;
      }
      return Direction.UNSPECIFIED;
    };
    MDCChipFoundation3.prototype.navigateActions = function(nav) {
      this.adapter.setActionFocus(nav.from, MDCChipActionFocusBehavior.NOT_FOCUSABLE);
      this.adapter.setActionFocus(nav.to, MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED);
    };
    MDCChipFoundation3.prototype.shouldRemove = function(_a2) {
      var source = _a2.source, trigger = _a2.trigger;
      if (trigger === MDCChipActionInteractionTrigger.BACKSPACE_KEY || trigger === MDCChipActionInteractionTrigger.DELETE_KEY) {
        return true;
      }
      return source === MDCChipActionType.TRAILING;
    };
    MDCChipFoundation3.prototype.getRemovedAnnouncement = function() {
      var msg = this.adapter.getAttribute(MDCChipAttributes.DATA_REMOVED_ANNOUNCEMENT);
      return msg || void 0;
    };
    MDCChipFoundation3.prototype.getAddedAnnouncement = function() {
      var msg = this.adapter.getAttribute(MDCChipAttributes.DATA_ADDED_ANNOUNCEMENT);
      return msg || void 0;
    };
    MDCChipFoundation3.prototype.animateSelection = function(isSelected) {
      var _this = this;
      this.resetAnimationStyles();
      this.animFrame.request(AnimationKeys.SELECTION, function() {
        _this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.updateSelectionStyles(isSelected);
        });
      });
    };
    MDCChipFoundation3.prototype.resetAnimationStyles = function() {
      this.adapter.removeClass(MDCChipCssClasses.SELECTING);
      this.adapter.removeClass(MDCChipCssClasses.DESELECTING);
      this.adapter.removeClass(MDCChipCssClasses.SELECTING_WITH_PRIMARY_ICON);
      this.adapter.removeClass(MDCChipCssClasses.DESELECTING_WITH_PRIMARY_ICON);
    };
    MDCChipFoundation3.prototype.updateSelectionStyles = function(isSelected) {
      var _this = this;
      var hasIcon = this.adapter.hasClass(MDCChipCssClasses.WITH_PRIMARY_ICON);
      if (hasIcon && isSelected) {
        this.adapter.addClass(MDCChipCssClasses.SELECTING_WITH_PRIMARY_ICON);
        this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.adapter.addClass(MDCChipCssClasses.SELECTED);
        });
        return;
      }
      if (hasIcon && !isSelected) {
        this.adapter.addClass(MDCChipCssClasses.DESELECTING_WITH_PRIMARY_ICON);
        this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.adapter.removeClass(MDCChipCssClasses.SELECTED);
        });
        return;
      }
      if (isSelected) {
        this.adapter.addClass(MDCChipCssClasses.SELECTING);
        this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.adapter.addClass(MDCChipCssClasses.SELECTED);
        });
        return;
      }
      if (!isSelected) {
        this.adapter.addClass(MDCChipCssClasses.DESELECTING);
        this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.adapter.removeClass(MDCChipCssClasses.SELECTED);
        });
        return;
      }
    };
    return MDCChipFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/chip/component.js
var MDCChip = (
  /** @class */
  function(_super) {
    __extends(MDCChip3, _super);
    function MDCChip3() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.rootHTML = _this.root;
      return _this;
    }
    MDCChip3.attachTo = function(root) {
      return new MDCChip3(root);
    };
    MDCChip3.prototype.initialize = function(actionFactory) {
      if (actionFactory === void 0) {
        actionFactory = function(el) {
          return new MDCChipAction(el);
        };
      }
      this.actions = /* @__PURE__ */ new Map();
      var actionEls = this.root.querySelectorAll(".mdc-evolution-chip__action");
      for (var i = 0; i < actionEls.length; i++) {
        var action = actionFactory(actionEls[i]);
        this.actions.set(action.actionType(), action);
      }
    };
    MDCChip3.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleActionInteraction = function(event) {
        _this.foundation.handleActionInteraction(event);
      };
      this.handleActionNavigation = function(event) {
        _this.foundation.handleActionNavigation(event);
      };
      this.listen(MDCChipActionEvents.INTERACTION, this.handleActionInteraction);
      this.listen(MDCChipActionEvents.NAVIGATION, this.handleActionNavigation);
    };
    MDCChip3.prototype.destroy = function() {
      this.unlisten(MDCChipActionEvents.INTERACTION, this.handleActionInteraction);
      this.unlisten(MDCChipActionEvents.NAVIGATION, this.handleActionNavigation);
      _super.prototype.destroy.call(this);
    };
    MDCChip3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        emitEvent: function(eventName, eventDetail) {
          _this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        getActions: function() {
          var e_1, _a2;
          var actions = [];
          try {
            for (var _b = __values(_this.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 1), key = _d[0];
              actions.push(key);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return))
                _a2.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return actions;
        },
        getAttribute: function(attrName) {
          return _this.root.getAttribute(attrName);
        },
        getElementID: function() {
          return _this.rootHTML.id;
        },
        getOffsetWidth: function() {
          return _this.rootHTML.offsetWidth;
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        isActionSelectable: function(actionType) {
          var action = _this.actions.get(actionType);
          if (action) {
            return action.isSelectable();
          }
          return false;
        },
        isActionSelected: function(actionType) {
          var action = _this.actions.get(actionType);
          if (action) {
            return action.isSelected();
          }
          return false;
        },
        isActionFocusable: function(actionType) {
          var action = _this.actions.get(actionType);
          if (action) {
            return action.isFocusable();
          }
          return false;
        },
        isActionDisabled: function(actionType) {
          var action = _this.actions.get(actionType);
          if (action) {
            return action.isDisabled();
          }
          return false;
        },
        isRTL: function() {
          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        setActionDisabled: function(actionType, isDisabled) {
          var action = _this.actions.get(actionType);
          if (action) {
            action.setDisabled(isDisabled);
          }
        },
        setActionFocus: function(actionType, behavior) {
          var action = _this.actions.get(actionType);
          if (action) {
            action.setFocus(behavior);
          }
        },
        setActionSelected: function(actionType, isSelected) {
          var action = _this.actions.get(actionType);
          if (action) {
            action.setSelected(isSelected);
          }
        },
        setStyleProperty: function(prop, value) {
          _this.rootHTML.style.setProperty(prop, value);
        }
      };
      return new MDCChipFoundation(adapter);
    };
    MDCChip3.prototype.remove = function() {
      var parent = this.root.parentNode;
      if (parent !== null) {
        parent.removeChild(this.root);
      }
    };
    MDCChip3.prototype.getActions = function() {
      return this.foundation.getActions();
    };
    MDCChip3.prototype.getElementID = function() {
      return this.foundation.getElementID();
    };
    MDCChip3.prototype.isDisabled = function() {
      return this.foundation.isDisabled();
    };
    MDCChip3.prototype.setDisabled = function(isDisabled) {
      this.foundation.setDisabled(isDisabled);
    };
    MDCChip3.prototype.isActionFocusable = function(action) {
      return this.foundation.isActionFocusable(action);
    };
    MDCChip3.prototype.isActionSelectable = function(action) {
      return this.foundation.isActionSelectable(action);
    };
    MDCChip3.prototype.isActionSelected = function(action) {
      return this.foundation.isActionSelected(action);
    };
    MDCChip3.prototype.setActionFocus = function(action, focus) {
      this.foundation.setActionFocus(action, focus);
    };
    MDCChip3.prototype.setActionSelected = function(action, isSelected) {
      this.foundation.setActionSelected(action, isSelected);
    };
    MDCChip3.prototype.startAnimation = function(animation) {
      this.foundation.startAnimation(animation);
    };
    return MDCChip3;
  }(MDCComponent)
);

// node_modules/@material/dom/announce.js
var AnnouncerPriority;
(function(AnnouncerPriority2) {
  AnnouncerPriority2["POLITE"] = "polite";
  AnnouncerPriority2["ASSERTIVE"] = "assertive";
})(AnnouncerPriority || (AnnouncerPriority = {}));
var DATA_MDC_DOM_ANNOUNCE = "data-mdc-dom-announce";
function announce(message, options) {
  Announcer.getInstance().say(message, options);
}
var Announcer = (
  /** @class */
  function() {
    function Announcer2() {
      this.liveRegions = /* @__PURE__ */ new Map();
    }
    Announcer2.getInstance = function() {
      if (!Announcer2.instance) {
        Announcer2.instance = new Announcer2();
      }
      return Announcer2.instance;
    };
    Announcer2.prototype.say = function(message, options) {
      var _a2, _b;
      var priority = (_a2 = options === null || options === void 0 ? void 0 : options.priority) !== null && _a2 !== void 0 ? _a2 : AnnouncerPriority.POLITE;
      var ownerDocument = (_b = options === null || options === void 0 ? void 0 : options.ownerDocument) !== null && _b !== void 0 ? _b : document;
      var liveRegion = this.getLiveRegion(priority, ownerDocument);
      liveRegion.textContent = "";
      setTimeout(function() {
        liveRegion.textContent = message;
        ownerDocument.addEventListener("click", clearLiveRegion);
      }, 1);
      function clearLiveRegion() {
        liveRegion.textContent = "";
        ownerDocument.removeEventListener("click", clearLiveRegion);
      }
    };
    Announcer2.prototype.getLiveRegion = function(priority, ownerDocument) {
      var documentLiveRegions = this.liveRegions.get(ownerDocument);
      if (!documentLiveRegions) {
        documentLiveRegions = /* @__PURE__ */ new Map();
        this.liveRegions.set(ownerDocument, documentLiveRegions);
      }
      var existingLiveRegion = documentLiveRegions.get(priority);
      if (existingLiveRegion && ownerDocument.body.contains(existingLiveRegion)) {
        return existingLiveRegion;
      }
      var liveRegion = this.createLiveRegion(priority, ownerDocument);
      documentLiveRegions.set(priority, liveRegion);
      return liveRegion;
    };
    Announcer2.prototype.createLiveRegion = function(priority, ownerDocument) {
      var el = ownerDocument.createElement("div");
      el.style.position = "absolute";
      el.style.top = "-9999px";
      el.style.left = "-9999px";
      el.style.height = "1px";
      el.style.overflow = "hidden";
      el.setAttribute("aria-atomic", "true");
      el.setAttribute("aria-live", priority);
      el.setAttribute(DATA_MDC_DOM_ANNOUNCE, "true");
      ownerDocument.body.appendChild(el);
      return el;
    };
    return Announcer2;
  }()
);

// node_modules/@material/chips/chip-set/constants.js
var MDCChipSetAttributes;
(function(MDCChipSetAttributes2) {
  MDCChipSetAttributes2["ARIA_MULTISELECTABLE"] = "aria-multiselectable";
})(MDCChipSetAttributes || (MDCChipSetAttributes = {}));
var MDCChipSetCssClasses;
(function(MDCChipSetCssClasses2) {
  MDCChipSetCssClasses2["CHIP"] = "mdc-evolution-chip";
})(MDCChipSetCssClasses || (MDCChipSetCssClasses = {}));
var MDCChipSetEvents;
(function(MDCChipSetEvents2) {
  MDCChipSetEvents2["INTERACTION"] = "MDCChipSet:interaction";
  MDCChipSetEvents2["REMOVAL"] = "MDCChipSet:removal";
  MDCChipSetEvents2["SELECTION"] = "MDCChipSet:selection";
})(MDCChipSetEvents || (MDCChipSetEvents = {}));

// node_modules/@material/chips/chip-set/foundation.js
var Operator;
(function(Operator2) {
  Operator2[Operator2["INCREMENT"] = 0] = "INCREMENT";
  Operator2[Operator2["DECREMENT"] = 1] = "DECREMENT";
})(Operator || (Operator = {}));
var MDCChipSetFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipSetFoundation3, _super);
    function MDCChipSetFoundation3(adapter) {
      return _super.call(this, __assign(__assign({}, MDCChipSetFoundation3.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCChipSetFoundation3, "defaultAdapter", {
      get: function() {
        return {
          announceMessage: function() {
            return void 0;
          },
          emitEvent: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getChipActionsAtIndex: function() {
            return [];
          },
          getChipCount: function() {
            return 0;
          },
          getChipIdAtIndex: function() {
            return "";
          },
          getChipIndexById: function() {
            return 0;
          },
          isChipFocusableAtIndex: function() {
            return false;
          },
          isChipSelectableAtIndex: function() {
            return false;
          },
          isChipSelectedAtIndex: function() {
            return false;
          },
          removeChipAtIndex: function() {
          },
          setChipFocusAtIndex: function() {
            return void 0;
          },
          setChipSelectedAtIndex: function() {
            return void 0;
          },
          startChipAnimationAtIndex: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipSetFoundation3.prototype.handleChipAnimation = function(_a2) {
      var detail = _a2.detail;
      var chipID = detail.chipID, animation = detail.animation, isComplete = detail.isComplete, addedAnnouncement = detail.addedAnnouncement, removedAnnouncement = detail.removedAnnouncement;
      var index = this.adapter.getChipIndexById(chipID);
      if (animation === MDCChipAnimation.EXIT && isComplete) {
        if (removedAnnouncement) {
          this.adapter.announceMessage(removedAnnouncement);
        }
        this.removeAfterAnimation(index, chipID);
        return;
      }
      if (animation === MDCChipAnimation.ENTER && isComplete && addedAnnouncement) {
        this.adapter.announceMessage(addedAnnouncement);
        return;
      }
    };
    MDCChipSetFoundation3.prototype.handleChipInteraction = function(_a2) {
      var detail = _a2.detail;
      var source = detail.source, chipID = detail.chipID, isSelectable = detail.isSelectable, isSelected = detail.isSelected, shouldRemove = detail.shouldRemove;
      var index = this.adapter.getChipIndexById(chipID);
      if (shouldRemove) {
        this.removeChip(index);
        return;
      }
      this.focusChip(index, source, MDCChipActionFocusBehavior.FOCUSABLE);
      this.adapter.emitEvent(MDCChipSetEvents.INTERACTION, {
        chipIndex: index,
        chipID
      });
      if (isSelectable) {
        this.setSelection(index, source, !isSelected);
      }
    };
    MDCChipSetFoundation3.prototype.handleChipNavigation = function(_a2) {
      var detail = _a2.detail;
      var chipID = detail.chipID, key = detail.key, isRTL = detail.isRTL, source = detail.source;
      var index = this.adapter.getChipIndexById(chipID);
      var toNextChip = key === KEY.ARROW_RIGHT && !isRTL || key === KEY.ARROW_LEFT && isRTL;
      if (toNextChip) {
        this.focusNextChipFrom(index + 1);
        return;
      }
      var toPreviousChip = key === KEY.ARROW_LEFT && !isRTL || key === KEY.ARROW_RIGHT && isRTL;
      if (toPreviousChip) {
        this.focusPrevChipFrom(index - 1);
        return;
      }
      if (key === KEY.ARROW_DOWN) {
        this.focusNextChipFrom(index + 1, source);
        return;
      }
      if (key === KEY.ARROW_UP) {
        this.focusPrevChipFrom(index - 1, source);
        return;
      }
      if (key === KEY.HOME) {
        this.focusNextChipFrom(0, source);
        return;
      }
      if (key === KEY.END) {
        this.focusPrevChipFrom(this.adapter.getChipCount() - 1, source);
        return;
      }
    };
    MDCChipSetFoundation3.prototype.getSelectedChipIndexes = function() {
      var e_1, _a2;
      var selectedIndexes = /* @__PURE__ */ new Set();
      var chipCount = this.adapter.getChipCount();
      for (var i = 0; i < chipCount; i++) {
        var actions = this.adapter.getChipActionsAtIndex(i);
        try {
          for (var actions_1 = (e_1 = void 0, __values(actions)), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
            var action = actions_1_1.value;
            if (this.adapter.isChipSelectedAtIndex(i, action)) {
              selectedIndexes.add(i);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (actions_1_1 && !actions_1_1.done && (_a2 = actions_1.return))
              _a2.call(actions_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      return selectedIndexes;
    };
    MDCChipSetFoundation3.prototype.setChipSelected = function(index, action, isSelected) {
      if (this.adapter.isChipSelectableAtIndex(index, action)) {
        this.setSelection(index, action, isSelected);
      }
    };
    MDCChipSetFoundation3.prototype.isChipSelected = function(index, action) {
      return this.adapter.isChipSelectedAtIndex(index, action);
    };
    MDCChipSetFoundation3.prototype.removeChip = function(index) {
      if (index >= this.adapter.getChipCount() || index < 0)
        return;
      this.adapter.startChipAnimationAtIndex(index, MDCChipAnimation.EXIT);
      this.adapter.emitEvent(MDCChipSetEvents.REMOVAL, {
        chipID: this.adapter.getChipIdAtIndex(index),
        chipIndex: index,
        isComplete: false
      });
    };
    MDCChipSetFoundation3.prototype.addChip = function(index) {
      if (index >= this.adapter.getChipCount() || index < 0)
        return;
      this.adapter.startChipAnimationAtIndex(index, MDCChipAnimation.ENTER);
    };
    MDCChipSetFoundation3.prototype.focusNextChipFrom = function(startIndex, targetAction) {
      var chipCount = this.adapter.getChipCount();
      for (var i = startIndex; i < chipCount; i++) {
        var focusableAction = this.getFocusableAction(i, Operator.INCREMENT, targetAction);
        if (focusableAction) {
          this.focusChip(i, focusableAction, MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED);
          return;
        }
      }
    };
    MDCChipSetFoundation3.prototype.focusPrevChipFrom = function(startIndex, targetAction) {
      for (var i = startIndex; i > -1; i--) {
        var focusableAction = this.getFocusableAction(i, Operator.DECREMENT, targetAction);
        if (focusableAction) {
          this.focusChip(i, focusableAction, MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED);
          return;
        }
      }
    };
    MDCChipSetFoundation3.prototype.getFocusableAction = function(index, op, targetAction) {
      var actions = this.adapter.getChipActionsAtIndex(index);
      if (op === Operator.DECREMENT)
        actions.reverse();
      if (targetAction) {
        return this.getMatchingFocusableAction(index, actions, targetAction);
      }
      return this.getFirstFocusableAction(index, actions);
    };
    MDCChipSetFoundation3.prototype.getFirstFocusableAction = function(index, actions) {
      var e_2, _a2;
      try {
        for (var actions_2 = __values(actions), actions_2_1 = actions_2.next(); !actions_2_1.done; actions_2_1 = actions_2.next()) {
          var action = actions_2_1.value;
          if (this.adapter.isChipFocusableAtIndex(index, action)) {
            return action;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (actions_2_1 && !actions_2_1.done && (_a2 = actions_2.return))
            _a2.call(actions_2);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return null;
    };
    MDCChipSetFoundation3.prototype.getMatchingFocusableAction = function(index, actions, targetAction) {
      var e_3, _a2;
      var focusableAction = null;
      try {
        for (var actions_3 = __values(actions), actions_3_1 = actions_3.next(); !actions_3_1.done; actions_3_1 = actions_3.next()) {
          var action = actions_3_1.value;
          if (this.adapter.isChipFocusableAtIndex(index, action)) {
            focusableAction = action;
          }
          if (focusableAction === targetAction) {
            return focusableAction;
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (actions_3_1 && !actions_3_1.done && (_a2 = actions_3.return))
            _a2.call(actions_3);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      return focusableAction;
    };
    MDCChipSetFoundation3.prototype.focusChip = function(index, action, focus) {
      var e_4, _a2;
      this.adapter.setChipFocusAtIndex(index, action, focus);
      var chipCount = this.adapter.getChipCount();
      for (var i = 0; i < chipCount; i++) {
        var actions = this.adapter.getChipActionsAtIndex(i);
        try {
          for (var actions_4 = (e_4 = void 0, __values(actions)), actions_4_1 = actions_4.next(); !actions_4_1.done; actions_4_1 = actions_4.next()) {
            var chipAction = actions_4_1.value;
            if (chipAction === action && i === index)
              continue;
            this.adapter.setChipFocusAtIndex(i, chipAction, MDCChipActionFocusBehavior.NOT_FOCUSABLE);
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (actions_4_1 && !actions_4_1.done && (_a2 = actions_4.return))
              _a2.call(actions_4);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
      }
    };
    MDCChipSetFoundation3.prototype.supportsMultiSelect = function() {
      return this.adapter.getAttribute(MDCChipSetAttributes.ARIA_MULTISELECTABLE) === "true";
    };
    MDCChipSetFoundation3.prototype.setSelection = function(index, action, isSelected) {
      var e_5, _a2;
      this.adapter.setChipSelectedAtIndex(index, action, isSelected);
      this.adapter.emitEvent(MDCChipSetEvents.SELECTION, {
        chipID: this.adapter.getChipIdAtIndex(index),
        chipIndex: index,
        isSelected
      });
      if (this.supportsMultiSelect()) {
        return;
      }
      var chipCount = this.adapter.getChipCount();
      for (var i = 0; i < chipCount; i++) {
        var actions = this.adapter.getChipActionsAtIndex(i);
        try {
          for (var actions_5 = (e_5 = void 0, __values(actions)), actions_5_1 = actions_5.next(); !actions_5_1.done; actions_5_1 = actions_5.next()) {
            var chipAction = actions_5_1.value;
            if (chipAction === action && i === index)
              continue;
            this.adapter.setChipSelectedAtIndex(i, chipAction, false);
          }
        } catch (e_5_1) {
          e_5 = { error: e_5_1 };
        } finally {
          try {
            if (actions_5_1 && !actions_5_1.done && (_a2 = actions_5.return))
              _a2.call(actions_5);
          } finally {
            if (e_5)
              throw e_5.error;
          }
        }
      }
    };
    MDCChipSetFoundation3.prototype.removeAfterAnimation = function(index, chipID) {
      this.adapter.removeChipAtIndex(index);
      this.adapter.emitEvent(MDCChipSetEvents.REMOVAL, {
        chipIndex: index,
        isComplete: true,
        chipID
      });
      var chipCount = this.adapter.getChipCount();
      if (chipCount <= 0)
        return;
      this.focusNearestFocusableAction(index);
    };
    MDCChipSetFoundation3.prototype.focusNearestFocusableAction = function(index) {
      var chipCount = this.adapter.getChipCount();
      var decrIndex = index;
      var incrIndex = index;
      while (decrIndex > -1 || incrIndex < chipCount) {
        var focusAction = this.getNearestFocusableAction(decrIndex, incrIndex, MDCChipActionType.TRAILING);
        if (focusAction) {
          this.focusChip(focusAction.index, focusAction.action, MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED);
          return;
        }
        decrIndex--;
        incrIndex++;
      }
    };
    MDCChipSetFoundation3.prototype.getNearestFocusableAction = function(decrIndex, incrIndex, actionType) {
      var decrAction = this.getFocusableAction(decrIndex, Operator.DECREMENT, actionType);
      if (decrAction) {
        return {
          index: decrIndex,
          action: decrAction
        };
      }
      if (incrIndex === decrIndex)
        return null;
      var incrAction = this.getFocusableAction(incrIndex, Operator.INCREMENT, actionType);
      if (incrAction) {
        return {
          index: incrIndex,
          action: incrAction
        };
      }
      return null;
    };
    return MDCChipSetFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/chip-set/component.js
var MDCChipSet = (
  /** @class */
  function(_super) {
    __extends(MDCChipSet3, _super);
    function MDCChipSet3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipSet3.attachTo = function(root) {
      return new MDCChipSet3(root);
    };
    MDCChipSet3.prototype.initialize = function(chipFactory) {
      if (chipFactory === void 0) {
        chipFactory = function(el) {
          return new MDCChip(el);
        };
      }
      this.chips = [];
      var chipEls = this.root.querySelectorAll("." + MDCChipSetCssClasses.CHIP);
      for (var i = 0; i < chipEls.length; i++) {
        var chip = chipFactory(chipEls[i]);
        this.chips.push(chip);
      }
    };
    MDCChipSet3.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleChipAnimation = function(event) {
        _this.foundation.handleChipAnimation(event);
      };
      this.handleChipInteraction = function(event) {
        _this.foundation.handleChipInteraction(event);
      };
      this.handleChipNavigation = function(event) {
        _this.foundation.handleChipNavigation(event);
      };
      this.listen(MDCChipEvents.ANIMATION, this.handleChipAnimation);
      this.listen(MDCChipEvents.INTERACTION, this.handleChipInteraction);
      this.listen(MDCChipEvents.NAVIGATION, this.handleChipNavigation);
    };
    MDCChipSet3.prototype.destroy = function() {
      this.unlisten(MDCChipEvents.ANIMATION, this.handleChipAnimation);
      this.unlisten(MDCChipEvents.INTERACTION, this.handleChipInteraction);
      this.unlisten(MDCChipEvents.NAVIGATION, this.handleChipNavigation);
      _super.prototype.destroy.call(this);
    };
    MDCChipSet3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        announceMessage: function(message) {
          announce(message);
        },
        emitEvent: function(eventName, eventDetail) {
          _this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        getAttribute: function(attrName) {
          return _this.root.getAttribute(attrName);
        },
        getChipActionsAtIndex: function(index) {
          if (!_this.isIndexValid(index))
            return [];
          return _this.chips[index].getActions();
        },
        getChipCount: function() {
          return _this.chips.length;
        },
        getChipIdAtIndex: function(index) {
          if (!_this.isIndexValid(index))
            return "";
          return _this.chips[index].getElementID();
        },
        getChipIndexById: function(id) {
          return _this.chips.findIndex(function(chip) {
            return chip.getElementID() === id;
          });
        },
        isChipFocusableAtIndex: function(index, action) {
          if (!_this.isIndexValid(index))
            return false;
          return _this.chips[index].isActionFocusable(action);
        },
        isChipSelectableAtIndex: function(index, action) {
          if (!_this.isIndexValid(index))
            return false;
          return _this.chips[index].isActionSelectable(action);
        },
        isChipSelectedAtIndex: function(index, action) {
          if (!_this.isIndexValid(index))
            return false;
          return _this.chips[index].isActionSelected(action);
        },
        removeChipAtIndex: function(index) {
          if (!_this.isIndexValid(index))
            return;
          _this.chips[index].destroy();
          _this.chips[index].remove();
          _this.chips.splice(index, 1);
        },
        setChipFocusAtIndex: function(index, action, focus) {
          if (!_this.isIndexValid(index))
            return;
          _this.chips[index].setActionFocus(action, focus);
        },
        setChipSelectedAtIndex: function(index, action, selected) {
          if (!_this.isIndexValid(index))
            return;
          _this.chips[index].setActionSelected(action, selected);
        },
        startChipAnimationAtIndex: function(index, animation) {
          if (!_this.isIndexValid(index))
            return;
          _this.chips[index].startAnimation(animation);
        }
      };
      return new MDCChipSetFoundation(adapter);
    };
    MDCChipSet3.prototype.getChipIndexByID = function(chipID) {
      return this.chips.findIndex(function(chip) {
        return chip.getElementID() === chipID;
      });
    };
    MDCChipSet3.prototype.getChipIdAtIndex = function(index) {
      if (!this.isIndexValid(index))
        return "";
      return this.chips[index].getElementID();
    };
    MDCChipSet3.prototype.getSelectedChipIndexes = function() {
      return this.foundation.getSelectedChipIndexes();
    };
    MDCChipSet3.prototype.setChipSelected = function(index, action, isSelected) {
      this.foundation.setChipSelected(index, action, isSelected);
    };
    MDCChipSet3.prototype.isChipSelected = function(index, action) {
      return this.foundation.isChipSelected(index, action);
    };
    MDCChipSet3.prototype.addChip = function(index) {
      this.foundation.addChip(index);
    };
    MDCChipSet3.prototype.removeChip = function(index) {
      this.foundation.removeChip(index);
    };
    MDCChipSet3.prototype.isIndexValid = function(index) {
      return index > -1 && index < this.chips.length;
    };
    return MDCChipSet3;
  }(MDCComponent)
);

// node_modules/@material/chips/deprecated/index.js
var deprecated_exports = {};
__export(deprecated_exports, {
  MDCChip: () => MDCChip2,
  MDCChipFoundation: () => MDCChipFoundation2,
  MDCChipSet: () => MDCChipSet2,
  MDCChipSetFoundation: () => MDCChipSetFoundation2,
  MDCChipTrailingAction: () => MDCChipTrailingAction,
  MDCChipTrailingActionFoundation: () => MDCChipTrailingActionFoundation2,
  chipCssClasses: () => cssClasses,
  chipSetCssClasses: () => cssClasses2,
  chipSetStrings: () => strings3,
  chipStrings: () => strings2,
  trailingActionStrings: () => strings
});

// node_modules/@material/chips/deprecated/trailingaction/constants.js
var InteractionTrigger;
(function(InteractionTrigger2) {
  InteractionTrigger2[InteractionTrigger2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  InteractionTrigger2[InteractionTrigger2["CLICK"] = 1] = "CLICK";
  InteractionTrigger2[InteractionTrigger2["BACKSPACE_KEY"] = 2] = "BACKSPACE_KEY";
  InteractionTrigger2[InteractionTrigger2["DELETE_KEY"] = 3] = "DELETE_KEY";
  InteractionTrigger2[InteractionTrigger2["SPACEBAR_KEY"] = 4] = "SPACEBAR_KEY";
  InteractionTrigger2[InteractionTrigger2["ENTER_KEY"] = 5] = "ENTER_KEY";
})(InteractionTrigger || (InteractionTrigger = {}));
var strings = {
  ARIA_HIDDEN: "aria-hidden",
  INTERACTION_EVENT: "MDCChipTrailingAction:interaction",
  NAVIGATION_EVENT: "MDCChipTrailingAction:navigation",
  TAB_INDEX: "tabindex"
};

// node_modules/@material/chips/deprecated/trailingaction/foundation.js
var MDCChipTrailingActionFoundation2 = (
  /** @class */
  function(_super) {
    __extends(MDCChipTrailingActionFoundation3, _super);
    function MDCChipTrailingActionFoundation3(adapter) {
      return _super.call(this, __assign(__assign({}, MDCChipTrailingActionFoundation3.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCChipTrailingActionFoundation3, "strings", {
      get: function() {
        return strings;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipTrailingActionFoundation3, "defaultAdapter", {
      get: function() {
        return {
          focus: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          setAttribute: function() {
            return void 0;
          },
          notifyInteraction: function() {
            return void 0;
          },
          notifyNavigation: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipTrailingActionFoundation3.prototype.handleClick = function(evt) {
      evt.stopPropagation();
      this.adapter.notifyInteraction(InteractionTrigger.CLICK);
    };
    MDCChipTrailingActionFoundation3.prototype.handleKeydown = function(evt) {
      evt.stopPropagation();
      var key = normalizeKey(evt);
      if (this.shouldNotifyInteractionFromKey(key)) {
        var trigger = this.getTriggerFromKey(key);
        this.adapter.notifyInteraction(trigger);
        return;
      }
      if (isNavigationEvent(evt)) {
        this.adapter.notifyNavigation(key);
        return;
      }
    };
    MDCChipTrailingActionFoundation3.prototype.removeFocus = function() {
      this.adapter.setAttribute(strings.TAB_INDEX, "-1");
    };
    MDCChipTrailingActionFoundation3.prototype.focus = function() {
      this.adapter.setAttribute(strings.TAB_INDEX, "0");
      this.adapter.focus();
    };
    MDCChipTrailingActionFoundation3.prototype.isNavigable = function() {
      return this.adapter.getAttribute(strings.ARIA_HIDDEN) !== "true";
    };
    MDCChipTrailingActionFoundation3.prototype.shouldNotifyInteractionFromKey = function(key) {
      var isFromActionKey = key === KEY.ENTER || key === KEY.SPACEBAR;
      var isFromDeleteKey = key === KEY.BACKSPACE || key === KEY.DELETE;
      return isFromActionKey || isFromDeleteKey;
    };
    MDCChipTrailingActionFoundation3.prototype.getTriggerFromKey = function(key) {
      if (key === KEY.SPACEBAR) {
        return InteractionTrigger.SPACEBAR_KEY;
      }
      if (key === KEY.ENTER) {
        return InteractionTrigger.ENTER_KEY;
      }
      if (key === KEY.DELETE) {
        return InteractionTrigger.DELETE_KEY;
      }
      if (key === KEY.BACKSPACE) {
        return InteractionTrigger.BACKSPACE_KEY;
      }
      return InteractionTrigger.UNSPECIFIED;
    };
    return MDCChipTrailingActionFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/deprecated/trailingaction/component.js
var MDCChipTrailingAction = (
  /** @class */
  function(_super) {
    __extends(MDCChipTrailingAction2, _super);
    function MDCChipTrailingAction2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MDCChipTrailingAction2.prototype, "ripple", {
      get: function() {
        return this.rippleSurface;
      },
      enumerable: false,
      configurable: true
    });
    MDCChipTrailingAction2.attachTo = function(root) {
      return new MDCChipTrailingAction2(root);
    };
    MDCChipTrailingAction2.prototype.initialize = function(rippleFactory) {
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      var rippleAdapter = MDCRipple.createAdapter(this);
      this.rippleSurface = rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
    };
    MDCChipTrailingAction2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleClick = function(evt) {
        _this.foundation.handleClick(evt);
      };
      this.handleKeydown = function(evt) {
        _this.foundation.handleKeydown(evt);
      };
      this.listen("click", this.handleClick);
      this.listen("keydown", this.handleKeydown);
    };
    MDCChipTrailingAction2.prototype.destroy = function() {
      this.rippleSurface.destroy();
      this.unlisten("click", this.handleClick);
      this.unlisten("keydown", this.handleKeydown);
      _super.prototype.destroy.call(this);
    };
    MDCChipTrailingAction2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        focus: function() {
          _this.root.focus();
        },
        getAttribute: function(attr) {
          return _this.root.getAttribute(attr);
        },
        notifyInteraction: function(trigger) {
          return _this.emit(
            strings.INTERACTION_EVENT,
            { trigger },
            true
            /* shouldBubble */
          );
        },
        notifyNavigation: function(key) {
          _this.emit(
            strings.NAVIGATION_EVENT,
            { key },
            true
            /* shouldBubble */
          );
        },
        setAttribute: function(attr, value) {
          _this.root.setAttribute(attr, value);
        }
      };
      return new MDCChipTrailingActionFoundation2(adapter);
    };
    MDCChipTrailingAction2.prototype.isNavigable = function() {
      return this.foundation.isNavigable();
    };
    MDCChipTrailingAction2.prototype.focus = function() {
      this.foundation.focus();
    };
    MDCChipTrailingAction2.prototype.removeFocus = function() {
      this.foundation.removeFocus();
    };
    return MDCChipTrailingAction2;
  }(MDCComponent)
);

// node_modules/@material/chips/deprecated/chip/constants.js
var Direction2;
(function(Direction3) {
  Direction3["LEFT"] = "left";
  Direction3["RIGHT"] = "right";
})(Direction2 || (Direction2 = {}));
var EventSource;
(function(EventSource2) {
  EventSource2["PRIMARY"] = "primary";
  EventSource2["TRAILING"] = "trailing";
  EventSource2["NONE"] = "none";
})(EventSource || (EventSource = {}));
var strings2 = {
  ADDED_ANNOUNCEMENT_ATTRIBUTE: "data-mdc-chip-added-announcement",
  ARIA_CHECKED: "aria-checked",
  ARROW_DOWN_KEY: "ArrowDown",
  ARROW_LEFT_KEY: "ArrowLeft",
  ARROW_RIGHT_KEY: "ArrowRight",
  ARROW_UP_KEY: "ArrowUp",
  BACKSPACE_KEY: "Backspace",
  CHECKMARK_SELECTOR: ".mdc-chip__checkmark",
  DELETE_KEY: "Delete",
  END_KEY: "End",
  ENTER_KEY: "Enter",
  ENTRY_ANIMATION_NAME: "mdc-chip-entry",
  HOME_KEY: "Home",
  IE_ARROW_DOWN_KEY: "Down",
  IE_ARROW_LEFT_KEY: "Left",
  IE_ARROW_RIGHT_KEY: "Right",
  IE_ARROW_UP_KEY: "Up",
  IE_DELETE_KEY: "Del",
  INTERACTION_EVENT: "MDCChip:interaction",
  LEADING_ICON_SELECTOR: ".mdc-chip__icon--leading",
  NAVIGATION_EVENT: "MDCChip:navigation",
  PRIMARY_ACTION_SELECTOR: ".mdc-chip__primary-action",
  REMOVED_ANNOUNCEMENT_ATTRIBUTE: "data-mdc-chip-removed-announcement",
  REMOVAL_EVENT: "MDCChip:removal",
  SELECTION_EVENT: "MDCChip:selection",
  SPACEBAR_KEY: " ",
  TAB_INDEX: "tabindex",
  TRAILING_ACTION_SELECTOR: ".mdc-chip-trailing-action",
  TRAILING_ICON_INTERACTION_EVENT: "MDCChip:trailingIconInteraction",
  TRAILING_ICON_SELECTOR: ".mdc-chip__icon--trailing"
};
var cssClasses = {
  CHECKMARK: "mdc-chip__checkmark",
  CHIP_EXIT: "mdc-chip--exit",
  DELETABLE: "mdc-chip--deletable",
  EDITABLE: "mdc-chip--editable",
  EDITING: "mdc-chip--editing",
  HIDDEN_LEADING_ICON: "mdc-chip__icon--leading-hidden",
  LEADING_ICON: "mdc-chip__icon--leading",
  PRIMARY_ACTION: "mdc-chip__primary-action",
  PRIMARY_ACTION_FOCUSED: "mdc-chip--primary-action-focused",
  SELECTED: "mdc-chip--selected",
  TEXT: "mdc-chip__text",
  TRAILING_ACTION: "mdc-chip__trailing-action",
  TRAILING_ICON: "mdc-chip__icon--trailing"
};
var navigationKeys = /* @__PURE__ */ new Set();
navigationKeys.add(strings2.ARROW_LEFT_KEY);
navigationKeys.add(strings2.ARROW_RIGHT_KEY);
navigationKeys.add(strings2.ARROW_DOWN_KEY);
navigationKeys.add(strings2.ARROW_UP_KEY);
navigationKeys.add(strings2.END_KEY);
navigationKeys.add(strings2.HOME_KEY);
navigationKeys.add(strings2.IE_ARROW_LEFT_KEY);
navigationKeys.add(strings2.IE_ARROW_RIGHT_KEY);
navigationKeys.add(strings2.IE_ARROW_DOWN_KEY);
navigationKeys.add(strings2.IE_ARROW_UP_KEY);
var jumpChipKeys = /* @__PURE__ */ new Set();
jumpChipKeys.add(strings2.ARROW_UP_KEY);
jumpChipKeys.add(strings2.ARROW_DOWN_KEY);
jumpChipKeys.add(strings2.HOME_KEY);
jumpChipKeys.add(strings2.END_KEY);
jumpChipKeys.add(strings2.IE_ARROW_UP_KEY);
jumpChipKeys.add(strings2.IE_ARROW_DOWN_KEY);

// node_modules/@material/chips/deprecated/chip/foundation.js
var emptyClientRect = {
  bottom: 0,
  height: 0,
  left: 0,
  right: 0,
  top: 0,
  width: 0
};
var FocusBehavior;
(function(FocusBehavior2) {
  FocusBehavior2[FocusBehavior2["SHOULD_FOCUS"] = 0] = "SHOULD_FOCUS";
  FocusBehavior2[FocusBehavior2["SHOULD_NOT_FOCUS"] = 1] = "SHOULD_NOT_FOCUS";
})(FocusBehavior || (FocusBehavior = {}));
var MDCChipFoundation2 = (
  /** @class */
  function(_super) {
    __extends(MDCChipFoundation3, _super);
    function MDCChipFoundation3(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCChipFoundation3.defaultAdapter), adapter)) || this;
      _this.shouldRemoveOnTrailingIconClick = true;
      _this.shouldFocusPrimaryActionOnClick = true;
      return _this;
    }
    Object.defineProperty(MDCChipFoundation3, "strings", {
      get: function() {
        return strings2;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipFoundation3, "cssClasses", {
      get: function() {
        return cssClasses;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipFoundation3, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          addClassToLeadingIcon: function() {
            return void 0;
          },
          eventTargetHasClass: function() {
            return false;
          },
          focusPrimaryAction: function() {
            return void 0;
          },
          focusTrailingAction: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getCheckmarkBoundingClientRect: function() {
            return emptyClientRect;
          },
          getComputedStyleValue: function() {
            return "";
          },
          getRootBoundingClientRect: function() {
            return emptyClientRect;
          },
          hasClass: function() {
            return false;
          },
          hasLeadingIcon: function() {
            return false;
          },
          isRTL: function() {
            return false;
          },
          isTrailingActionNavigable: function() {
            return false;
          },
          notifyEditFinish: function() {
            return void 0;
          },
          notifyEditStart: function() {
            return void 0;
          },
          notifyInteraction: function() {
            return void 0;
          },
          notifyNavigation: function() {
            return void 0;
          },
          notifyRemoval: function() {
            return void 0;
          },
          notifySelection: function() {
            return void 0;
          },
          notifyTrailingIconInteraction: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          removeClassFromLeadingIcon: function() {
            return void 0;
          },
          removeTrailingActionFocus: function() {
            return void 0;
          },
          setPrimaryActionAttr: function() {
            return void 0;
          },
          setStyleProperty: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipFoundation3.prototype.isSelected = function() {
      return this.adapter.hasClass(cssClasses.SELECTED);
    };
    MDCChipFoundation3.prototype.isEditable = function() {
      return this.adapter.hasClass(cssClasses.EDITABLE);
    };
    MDCChipFoundation3.prototype.isEditing = function() {
      return this.adapter.hasClass(cssClasses.EDITING);
    };
    MDCChipFoundation3.prototype.setSelected = function(selected) {
      this.setSelectedImpl(selected);
      this.notifySelection(selected);
    };
    MDCChipFoundation3.prototype.setSelectedFromChipSet = function(selected, shouldNotifyClients) {
      this.setSelectedImpl(selected);
      if (shouldNotifyClients) {
        this.notifyIgnoredSelection(selected);
      }
    };
    MDCChipFoundation3.prototype.getShouldRemoveOnTrailingIconClick = function() {
      return this.shouldRemoveOnTrailingIconClick;
    };
    MDCChipFoundation3.prototype.setShouldRemoveOnTrailingIconClick = function(shouldRemove) {
      this.shouldRemoveOnTrailingIconClick = shouldRemove;
    };
    MDCChipFoundation3.prototype.setShouldFocusPrimaryActionOnClick = function(shouldFocus) {
      this.shouldFocusPrimaryActionOnClick = shouldFocus;
    };
    MDCChipFoundation3.prototype.getDimensions = function() {
      var _this = this;
      var getRootRect = function() {
        return _this.adapter.getRootBoundingClientRect();
      };
      var getCheckmarkRect = function() {
        return _this.adapter.getCheckmarkBoundingClientRect();
      };
      if (!this.adapter.hasLeadingIcon()) {
        var checkmarkRect = getCheckmarkRect();
        if (checkmarkRect) {
          var rootRect = getRootRect();
          return {
            bottom: rootRect.bottom,
            height: rootRect.height,
            left: rootRect.left,
            right: rootRect.right,
            top: rootRect.top,
            width: rootRect.width + checkmarkRect.height
          };
        }
      }
      return getRootRect();
    };
    MDCChipFoundation3.prototype.beginExit = function() {
      this.adapter.addClass(cssClasses.CHIP_EXIT);
    };
    MDCChipFoundation3.prototype.handleClick = function() {
      this.adapter.notifyInteraction();
      this.setPrimaryActionFocusable(this.getFocusBehavior());
    };
    MDCChipFoundation3.prototype.handleDoubleClick = function() {
      if (this.isEditable()) {
        this.startEditing();
      }
    };
    MDCChipFoundation3.prototype.handleTransitionEnd = function(evt) {
      var _this = this;
      var shouldHandle = this.adapter.eventTargetHasClass(evt.target, cssClasses.CHIP_EXIT);
      var widthIsAnimating = evt.propertyName === "width";
      var opacityIsAnimating = evt.propertyName === "opacity";
      if (shouldHandle && opacityIsAnimating) {
        var chipWidth_1 = this.adapter.getComputedStyleValue("width");
        requestAnimationFrame(function() {
          _this.adapter.setStyleProperty("width", chipWidth_1);
          _this.adapter.setStyleProperty("padding", "0");
          _this.adapter.setStyleProperty("margin", "0");
          requestAnimationFrame(function() {
            _this.adapter.setStyleProperty("width", "0");
          });
        });
        return;
      }
      if (shouldHandle && widthIsAnimating) {
        this.removeFocus();
        var removedAnnouncement = this.adapter.getAttribute(strings2.REMOVED_ANNOUNCEMENT_ATTRIBUTE);
        this.adapter.notifyRemoval(removedAnnouncement);
      }
      if (!opacityIsAnimating) {
        return;
      }
      var shouldHideLeadingIcon = this.adapter.eventTargetHasClass(evt.target, cssClasses.LEADING_ICON) && this.adapter.hasClass(cssClasses.SELECTED);
      var shouldShowLeadingIcon = this.adapter.eventTargetHasClass(evt.target, cssClasses.CHECKMARK) && !this.adapter.hasClass(cssClasses.SELECTED);
      if (shouldHideLeadingIcon) {
        this.adapter.addClassToLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);
        return;
      }
      if (shouldShowLeadingIcon) {
        this.adapter.removeClassFromLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);
        return;
      }
    };
    MDCChipFoundation3.prototype.handleFocusIn = function(evt) {
      if (!this.eventFromPrimaryAction(evt)) {
        return;
      }
      this.adapter.addClass(cssClasses.PRIMARY_ACTION_FOCUSED);
    };
    MDCChipFoundation3.prototype.handleFocusOut = function(evt) {
      if (!this.eventFromPrimaryAction(evt)) {
        return;
      }
      if (this.isEditing()) {
        this.finishEditing();
      }
      this.adapter.removeClass(cssClasses.PRIMARY_ACTION_FOCUSED);
    };
    MDCChipFoundation3.prototype.handleTrailingActionInteraction = function() {
      this.adapter.notifyTrailingIconInteraction();
      this.removeChip();
    };
    MDCChipFoundation3.prototype.handleKeydown = function(evt) {
      if (this.isEditing()) {
        if (this.shouldFinishEditing(evt)) {
          evt.preventDefault();
          this.finishEditing();
        }
        return;
      }
      if (this.isEditable()) {
        if (this.shouldStartEditing(evt)) {
          evt.preventDefault();
          this.startEditing();
        }
      }
      if (this.shouldNotifyInteraction(evt)) {
        this.adapter.notifyInteraction();
        this.setPrimaryActionFocusable(this.getFocusBehavior());
        return;
      }
      if (this.isDeleteAction(evt)) {
        evt.preventDefault();
        this.removeChip();
        return;
      }
      if (!navigationKeys.has(evt.key)) {
        return;
      }
      evt.preventDefault();
      this.focusNextAction(evt.key, EventSource.PRIMARY);
    };
    MDCChipFoundation3.prototype.handleTrailingActionNavigation = function(evt) {
      this.focusNextAction(evt.detail.key, EventSource.TRAILING);
    };
    MDCChipFoundation3.prototype.removeFocus = function() {
      this.adapter.setPrimaryActionAttr(strings2.TAB_INDEX, "-1");
      this.adapter.removeTrailingActionFocus();
    };
    MDCChipFoundation3.prototype.focusPrimaryAction = function() {
      this.setPrimaryActionFocusable(FocusBehavior.SHOULD_FOCUS);
    };
    MDCChipFoundation3.prototype.focusTrailingAction = function() {
      var trailingActionIsNavigable = this.adapter.isTrailingActionNavigable();
      if (trailingActionIsNavigable) {
        this.adapter.setPrimaryActionAttr(strings2.TAB_INDEX, "-1");
        this.adapter.focusTrailingAction();
        return;
      }
      this.focusPrimaryAction();
    };
    MDCChipFoundation3.prototype.setPrimaryActionFocusable = function(focusBehavior) {
      this.adapter.setPrimaryActionAttr(strings2.TAB_INDEX, "0");
      if (focusBehavior === FocusBehavior.SHOULD_FOCUS) {
        this.adapter.focusPrimaryAction();
      }
      this.adapter.removeTrailingActionFocus();
    };
    MDCChipFoundation3.prototype.getFocusBehavior = function() {
      if (this.shouldFocusPrimaryActionOnClick) {
        return FocusBehavior.SHOULD_FOCUS;
      }
      return FocusBehavior.SHOULD_NOT_FOCUS;
    };
    MDCChipFoundation3.prototype.focusNextAction = function(key, source) {
      var isTrailingActionNavigable = this.adapter.isTrailingActionNavigable();
      var dir = this.getDirection(key);
      if (jumpChipKeys.has(key) || !isTrailingActionNavigable) {
        this.adapter.notifyNavigation(key, source);
        return;
      }
      if (source === EventSource.PRIMARY && dir === Direction2.RIGHT) {
        this.focusTrailingAction();
        return;
      }
      if (source === EventSource.TRAILING && dir === Direction2.LEFT) {
        this.focusPrimaryAction();
        return;
      }
      this.adapter.notifyNavigation(key, EventSource.NONE);
    };
    MDCChipFoundation3.prototype.getDirection = function(key) {
      var isRTL = this.adapter.isRTL();
      var isLeftKey = key === strings2.ARROW_LEFT_KEY || key === strings2.IE_ARROW_LEFT_KEY;
      var isRightKey = key === strings2.ARROW_RIGHT_KEY || key === strings2.IE_ARROW_RIGHT_KEY;
      if (!isRTL && isLeftKey || isRTL && isRightKey) {
        return Direction2.LEFT;
      }
      return Direction2.RIGHT;
    };
    MDCChipFoundation3.prototype.removeChip = function() {
      if (this.shouldRemoveOnTrailingIconClick) {
        this.beginExit();
      }
    };
    MDCChipFoundation3.prototype.shouldStartEditing = function(evt) {
      return this.eventFromPrimaryAction(evt) && evt.key === strings2.ENTER_KEY;
    };
    MDCChipFoundation3.prototype.shouldFinishEditing = function(evt) {
      return evt.key === strings2.ENTER_KEY;
    };
    MDCChipFoundation3.prototype.shouldNotifyInteraction = function(evt) {
      return evt.key === strings2.ENTER_KEY || evt.key === strings2.SPACEBAR_KEY;
    };
    MDCChipFoundation3.prototype.isDeleteAction = function(evt) {
      var isDeletable = this.adapter.hasClass(cssClasses.DELETABLE);
      return isDeletable && (evt.key === strings2.BACKSPACE_KEY || evt.key === strings2.DELETE_KEY || evt.key === strings2.IE_DELETE_KEY);
    };
    MDCChipFoundation3.prototype.setSelectedImpl = function(selected) {
      if (selected) {
        this.adapter.addClass(cssClasses.SELECTED);
        this.adapter.setPrimaryActionAttr(strings2.ARIA_CHECKED, "true");
      } else {
        this.adapter.removeClass(cssClasses.SELECTED);
        this.adapter.setPrimaryActionAttr(strings2.ARIA_CHECKED, "false");
      }
    };
    MDCChipFoundation3.prototype.notifySelection = function(selected) {
      this.adapter.notifySelection(selected, false);
    };
    MDCChipFoundation3.prototype.notifyIgnoredSelection = function(selected) {
      this.adapter.notifySelection(selected, true);
    };
    MDCChipFoundation3.prototype.eventFromPrimaryAction = function(evt) {
      return this.adapter.eventTargetHasClass(evt.target, cssClasses.PRIMARY_ACTION);
    };
    MDCChipFoundation3.prototype.startEditing = function() {
      this.adapter.addClass(cssClasses.EDITING);
      this.adapter.notifyEditStart();
    };
    MDCChipFoundation3.prototype.finishEditing = function() {
      this.adapter.removeClass(cssClasses.EDITING);
      this.adapter.notifyEditFinish();
    };
    return MDCChipFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/deprecated/chip/component.js
var MDCChip2 = (
  /** @class */
  function(_super) {
    __extends(MDCChip3, _super);
    function MDCChip3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MDCChip3.prototype, "selected", {
      /**
       * @return Whether the chip is selected.
       */
      get: function() {
        return this.foundation.isSelected();
      },
      /**
       * Sets selected state on the chip.
       */
      set: function(selected) {
        this.foundation.setSelected(selected);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChip3.prototype, "shouldRemoveOnTrailingIconClick", {
      /**
       * @return Whether a trailing icon click should trigger exit/removal of the chip.
       */
      get: function() {
        return this.foundation.getShouldRemoveOnTrailingIconClick();
      },
      /**
       * Sets whether a trailing icon click should trigger exit/removal of the chip.
       */
      set: function(shouldRemove) {
        this.foundation.setShouldRemoveOnTrailingIconClick(shouldRemove);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChip3.prototype, "setShouldFocusPrimaryActionOnClick", {
      /**
       * Sets whether a clicking on the chip should focus the primary action.
       */
      set: function(shouldFocus) {
        this.foundation.setShouldFocusPrimaryActionOnClick(shouldFocus);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChip3.prototype, "ripple", {
      get: function() {
        return this.rippleSurface;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChip3.prototype, "id", {
      get: function() {
        return this.root.id;
      },
      enumerable: false,
      configurable: true
    });
    MDCChip3.attachTo = function(root) {
      return new MDCChip3(root);
    };
    MDCChip3.prototype.initialize = function(rippleFactory, trailingActionFactory) {
      var _this = this;
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      if (trailingActionFactory === void 0) {
        trailingActionFactory = function(el) {
          return new MDCChipTrailingAction(el);
        };
      }
      this.leadingIcon = this.root.querySelector(strings2.LEADING_ICON_SELECTOR);
      this.checkmark = this.root.querySelector(strings2.CHECKMARK_SELECTOR);
      this.primaryAction = this.root.querySelector(strings2.PRIMARY_ACTION_SELECTOR);
      var trailingActionEl = this.root.querySelector(strings2.TRAILING_ACTION_SELECTOR);
      if (trailingActionEl) {
        this.trailingAction = trailingActionFactory(trailingActionEl);
      }
      var rippleAdapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function() {
        return _this.foundation.getDimensions();
      } });
      this.rippleSurface = rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
    };
    MDCChip3.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleTrailingActionInteraction = function() {
        _this.foundation.handleTrailingActionInteraction();
      };
      this.handleTrailingActionNavigation = function(evt) {
        _this.foundation.handleTrailingActionNavigation(evt);
      };
      this.handleClick = function() {
        _this.foundation.handleClick();
      };
      this.handleKeydown = function(evt) {
        _this.foundation.handleKeydown(evt);
      };
      this.handleTransitionEnd = function(evt) {
        _this.foundation.handleTransitionEnd(evt);
      };
      this.handleFocusIn = function(evt) {
        _this.foundation.handleFocusIn(evt);
      };
      this.handleFocusOut = function(evt) {
        _this.foundation.handleFocusOut(evt);
      };
      this.listen("transitionend", this.handleTransitionEnd);
      this.listen("click", this.handleClick);
      this.listen("keydown", this.handleKeydown);
      this.listen("focusin", this.handleFocusIn);
      this.listen("focusout", this.handleFocusOut);
      if (this.trailingAction) {
        this.listen(strings.INTERACTION_EVENT, this.handleTrailingActionInteraction);
        this.listen(strings.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
      }
    };
    MDCChip3.prototype.destroy = function() {
      this.rippleSurface.destroy();
      this.unlisten("transitionend", this.handleTransitionEnd);
      this.unlisten("keydown", this.handleKeydown);
      this.unlisten("click", this.handleClick);
      this.unlisten("focusin", this.handleFocusIn);
      this.unlisten("focusout", this.handleFocusOut);
      if (this.trailingAction) {
        this.unlisten(strings.INTERACTION_EVENT, this.handleTrailingActionInteraction);
        this.unlisten(strings.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
      }
      _super.prototype.destroy.call(this);
    };
    MDCChip3.prototype.beginExit = function() {
      this.foundation.beginExit();
    };
    MDCChip3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        addClassToLeadingIcon: function(className) {
          if (_this.leadingIcon) {
            _this.leadingIcon.classList.add(className);
          }
        },
        eventTargetHasClass: function(target, className) {
          return target ? target.classList.contains(className) : false;
        },
        focusPrimaryAction: function() {
          if (_this.primaryAction) {
            _this.primaryAction.focus();
          }
        },
        focusTrailingAction: function() {
          if (_this.trailingAction) {
            _this.trailingAction.focus();
          }
        },
        getAttribute: function(attr) {
          return _this.root.getAttribute(attr);
        },
        getCheckmarkBoundingClientRect: function() {
          return _this.checkmark ? _this.checkmark.getBoundingClientRect() : null;
        },
        getComputedStyleValue: function(propertyName) {
          return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
        },
        getRootBoundingClientRect: function() {
          return _this.root.getBoundingClientRect();
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        hasLeadingIcon: function() {
          return !!_this.leadingIcon;
        },
        isRTL: function() {
          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
        },
        isTrailingActionNavigable: function() {
          if (_this.trailingAction) {
            return _this.trailingAction.isNavigable();
          }
          return false;
        },
        notifyInteraction: function() {
          return _this.emit(
            strings2.INTERACTION_EVENT,
            { chipId: _this.id },
            true
            /* shouldBubble */
          );
        },
        notifyNavigation: function(key, source) {
          return _this.emit(
            strings2.NAVIGATION_EVENT,
            { chipId: _this.id, key, source },
            true
            /* shouldBubble */
          );
        },
        notifyRemoval: function(removedAnnouncement) {
          _this.emit(
            strings2.REMOVAL_EVENT,
            { chipId: _this.id, removedAnnouncement },
            true
            /* shouldBubble */
          );
        },
        notifySelection: function(selected, shouldIgnore) {
          return _this.emit(
            strings2.SELECTION_EVENT,
            { chipId: _this.id, selected, shouldIgnore },
            true
            /* shouldBubble */
          );
        },
        notifyTrailingIconInteraction: function() {
          return _this.emit(
            strings2.TRAILING_ICON_INTERACTION_EVENT,
            { chipId: _this.id },
            true
            /* shouldBubble */
          );
        },
        notifyEditStart: function() {
        },
        notifyEditFinish: function() {
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        removeClassFromLeadingIcon: function(className) {
          if (_this.leadingIcon) {
            _this.leadingIcon.classList.remove(className);
          }
        },
        removeTrailingActionFocus: function() {
          if (_this.trailingAction) {
            _this.trailingAction.removeFocus();
          }
        },
        setPrimaryActionAttr: function(attr, value) {
          if (_this.primaryAction) {
            _this.primaryAction.setAttribute(attr, value);
          }
        },
        setStyleProperty: function(propertyName, value) {
          return _this.root.style.setProperty(propertyName, value);
        }
      };
      return new MDCChipFoundation2(adapter);
    };
    MDCChip3.prototype.setSelectedFromChipSet = function(selected, shouldNotifyClients) {
      this.foundation.setSelectedFromChipSet(selected, shouldNotifyClients);
    };
    MDCChip3.prototype.focusPrimaryAction = function() {
      this.foundation.focusPrimaryAction();
    };
    MDCChip3.prototype.focusTrailingAction = function() {
      this.foundation.focusTrailingAction();
    };
    MDCChip3.prototype.removeFocus = function() {
      this.foundation.removeFocus();
    };
    MDCChip3.prototype.remove = function() {
      var parent = this.root.parentNode;
      if (parent !== null) {
        parent.removeChild(this.root);
      }
    };
    return MDCChip3;
  }(MDCComponent)
);

// node_modules/@material/chips/deprecated/chip-set/constants.js
var strings3 = {
  CHIP_SELECTOR: ".mdc-chip"
};
var cssClasses2 = {
  CHOICE: "mdc-chip-set--choice",
  FILTER: "mdc-chip-set--filter"
};

// node_modules/@material/chips/deprecated/chip-set/foundation.js
var MDCChipSetFoundation2 = (
  /** @class */
  function(_super) {
    __extends(MDCChipSetFoundation3, _super);
    function MDCChipSetFoundation3(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCChipSetFoundation3.defaultAdapter), adapter)) || this;
      _this.selectedChipIds = [];
      return _this;
    }
    Object.defineProperty(MDCChipSetFoundation3, "strings", {
      get: function() {
        return strings3;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipSetFoundation3, "cssClasses", {
      get: function() {
        return cssClasses2;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipSetFoundation3, "defaultAdapter", {
      get: function() {
        return {
          announceMessage: function() {
            return void 0;
          },
          focusChipPrimaryActionAtIndex: function() {
            return void 0;
          },
          focusChipTrailingActionAtIndex: function() {
            return void 0;
          },
          getChipListCount: function() {
            return -1;
          },
          getIndexOfChipById: function() {
            return -1;
          },
          hasClass: function() {
            return false;
          },
          isRTL: function() {
            return false;
          },
          removeChipAtIndex: function() {
            return void 0;
          },
          removeFocusFromChipAtIndex: function() {
            return void 0;
          },
          selectChipAtIndex: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipSetFoundation3.prototype.getSelectedChipIds = function() {
      return this.selectedChipIds.slice();
    };
    MDCChipSetFoundation3.prototype.select = function(chipId) {
      this.selectImpl(chipId, false);
    };
    MDCChipSetFoundation3.prototype.handleChipInteraction = function(_a2) {
      var chipId = _a2.chipId;
      var index = this.adapter.getIndexOfChipById(chipId);
      this.removeFocusFromChipsExcept(index);
      if (this.adapter.hasClass(cssClasses2.CHOICE) || this.adapter.hasClass(cssClasses2.FILTER)) {
        this.toggleSelect(chipId);
      }
    };
    MDCChipSetFoundation3.prototype.handleChipSelection = function(_a2) {
      var chipId = _a2.chipId, selected = _a2.selected, shouldIgnore = _a2.shouldIgnore;
      if (shouldIgnore) {
        return;
      }
      var chipIsSelected = this.selectedChipIds.indexOf(chipId) >= 0;
      if (selected && !chipIsSelected) {
        this.select(chipId);
      } else if (!selected && chipIsSelected) {
        this.deselectImpl(chipId);
      }
    };
    MDCChipSetFoundation3.prototype.handleChipRemoval = function(_a2) {
      var chipId = _a2.chipId, removedAnnouncement = _a2.removedAnnouncement;
      if (removedAnnouncement) {
        this.adapter.announceMessage(removedAnnouncement);
      }
      var index = this.adapter.getIndexOfChipById(chipId);
      this.deselectAndNotifyClients(chipId);
      this.adapter.removeChipAtIndex(index);
      var maxIndex = this.adapter.getChipListCount() - 1;
      if (maxIndex < 0) {
        return;
      }
      var nextIndex = Math.min(index, maxIndex);
      this.removeFocusFromChipsExcept(nextIndex);
      this.adapter.focusChipTrailingActionAtIndex(nextIndex);
    };
    MDCChipSetFoundation3.prototype.handleChipNavigation = function(_a2) {
      var chipId = _a2.chipId, key = _a2.key, source = _a2.source;
      var maxIndex = this.adapter.getChipListCount() - 1;
      var index = this.adapter.getIndexOfChipById(chipId);
      if (index === -1 || !navigationKeys.has(key)) {
        return;
      }
      var isRTL = this.adapter.isRTL();
      var isLeftKey = key === strings2.ARROW_LEFT_KEY || key === strings2.IE_ARROW_LEFT_KEY;
      var isRightKey = key === strings2.ARROW_RIGHT_KEY || key === strings2.IE_ARROW_RIGHT_KEY;
      var isDownKey = key === strings2.ARROW_DOWN_KEY || key === strings2.IE_ARROW_DOWN_KEY;
      var shouldIncrement = !isRTL && isRightKey || isRTL && isLeftKey || isDownKey;
      var isHome = key === strings2.HOME_KEY;
      var isEnd = key === strings2.END_KEY;
      if (shouldIncrement) {
        index++;
      } else if (isHome) {
        index = 0;
      } else if (isEnd) {
        index = maxIndex;
      } else {
        index--;
      }
      if (index < 0 || index > maxIndex) {
        return;
      }
      this.removeFocusFromChipsExcept(index);
      this.focusChipAction(index, key, source);
    };
    MDCChipSetFoundation3.prototype.focusChipAction = function(index, key, source) {
      var shouldJumpChips = jumpChipKeys.has(key);
      if (shouldJumpChips && source === EventSource.PRIMARY) {
        return this.adapter.focusChipPrimaryActionAtIndex(index);
      }
      if (shouldJumpChips && source === EventSource.TRAILING) {
        return this.adapter.focusChipTrailingActionAtIndex(index);
      }
      var dir = this.getDirection(key);
      if (dir === Direction2.LEFT) {
        return this.adapter.focusChipTrailingActionAtIndex(index);
      }
      if (dir === Direction2.RIGHT) {
        return this.adapter.focusChipPrimaryActionAtIndex(index);
      }
    };
    MDCChipSetFoundation3.prototype.getDirection = function(key) {
      var isRTL = this.adapter.isRTL();
      var isLeftKey = key === strings2.ARROW_LEFT_KEY || key === strings2.IE_ARROW_LEFT_KEY;
      var isRightKey = key === strings2.ARROW_RIGHT_KEY || key === strings2.IE_ARROW_RIGHT_KEY;
      if (!isRTL && isLeftKey || isRTL && isRightKey) {
        return Direction2.LEFT;
      }
      return Direction2.RIGHT;
    };
    MDCChipSetFoundation3.prototype.deselectImpl = function(chipId, shouldNotifyClients) {
      if (shouldNotifyClients === void 0) {
        shouldNotifyClients = false;
      }
      var index = this.selectedChipIds.indexOf(chipId);
      if (index >= 0) {
        this.selectedChipIds.splice(index, 1);
        var chipIndex = this.adapter.getIndexOfChipById(chipId);
        this.adapter.selectChipAtIndex(
          chipIndex,
          /** isSelected */
          false,
          shouldNotifyClients
        );
      }
    };
    MDCChipSetFoundation3.prototype.deselectAndNotifyClients = function(chipId) {
      this.deselectImpl(chipId, true);
    };
    MDCChipSetFoundation3.prototype.toggleSelect = function(chipId) {
      if (this.selectedChipIds.indexOf(chipId) >= 0) {
        this.deselectAndNotifyClients(chipId);
      } else {
        this.selectAndNotifyClients(chipId);
      }
    };
    MDCChipSetFoundation3.prototype.removeFocusFromChipsExcept = function(index) {
      var chipCount = this.adapter.getChipListCount();
      for (var i = 0; i < chipCount; i++) {
        if (i !== index) {
          this.adapter.removeFocusFromChipAtIndex(i);
        }
      }
    };
    MDCChipSetFoundation3.prototype.selectAndNotifyClients = function(chipId) {
      this.selectImpl(chipId, true);
    };
    MDCChipSetFoundation3.prototype.selectImpl = function(chipId, shouldNotifyClients) {
      if (this.selectedChipIds.indexOf(chipId) >= 0) {
        return;
      }
      if (this.adapter.hasClass(cssClasses2.CHOICE) && this.selectedChipIds.length > 0) {
        var previouslySelectedChip = this.selectedChipIds[0];
        var previouslySelectedIndex = this.adapter.getIndexOfChipById(previouslySelectedChip);
        this.selectedChipIds = [];
        this.adapter.selectChipAtIndex(
          previouslySelectedIndex,
          /** isSelected */
          false,
          shouldNotifyClients
        );
      }
      this.selectedChipIds.push(chipId);
      var index = this.adapter.getIndexOfChipById(chipId);
      this.adapter.selectChipAtIndex(
        index,
        /** isSelected */
        true,
        shouldNotifyClients
      );
    };
    return MDCChipSetFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/deprecated/chip-set/component.js
var _a = MDCChipFoundation2.strings;
var INTERACTION_EVENT = _a.INTERACTION_EVENT;
var SELECTION_EVENT = _a.SELECTION_EVENT;
var REMOVAL_EVENT = _a.REMOVAL_EVENT;
var NAVIGATION_EVENT = _a.NAVIGATION_EVENT;
var CHIP_SELECTOR = MDCChipSetFoundation2.strings.CHIP_SELECTOR;
var idCounter = 0;
var MDCChipSet2 = (
  /** @class */
  function(_super) {
    __extends(MDCChipSet3, _super);
    function MDCChipSet3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipSet3.attachTo = function(root) {
      return new MDCChipSet3(root);
    };
    Object.defineProperty(MDCChipSet3.prototype, "chips", {
      get: function() {
        return this.chipsList.slice();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipSet3.prototype, "selectedChipIds", {
      /**
       * @return An array of the IDs of all selected chips.
       */
      get: function() {
        return this.foundation.getSelectedChipIds();
      },
      enumerable: false,
      configurable: true
    });
    MDCChipSet3.prototype.initialize = function(chipFactory) {
      if (chipFactory === void 0) {
        chipFactory = function(el) {
          return new MDCChip2(el);
        };
      }
      this.chipFactory = chipFactory;
      this.chipsList = this.instantiateChips(this.chipFactory);
    };
    MDCChipSet3.prototype.initialSyncWithDOM = function() {
      var e_1, _a2;
      var _this = this;
      try {
        for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
          var chip = _c.value;
          if (chip.id && chip.selected) {
            this.foundation.select(chip.id);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      this.handleChipInteraction = function(evt) {
        return _this.foundation.handleChipInteraction(evt.detail);
      };
      this.handleChipSelection = function(evt) {
        return _this.foundation.handleChipSelection(evt.detail);
      };
      this.handleChipRemoval = function(evt) {
        return _this.foundation.handleChipRemoval(evt.detail);
      };
      this.handleChipNavigation = function(evt) {
        return _this.foundation.handleChipNavigation(evt.detail);
      };
      this.listen(INTERACTION_EVENT, this.handleChipInteraction);
      this.listen(SELECTION_EVENT, this.handleChipSelection);
      this.listen(REMOVAL_EVENT, this.handleChipRemoval);
      this.listen(NAVIGATION_EVENT, this.handleChipNavigation);
    };
    MDCChipSet3.prototype.destroy = function() {
      var e_2, _a2;
      try {
        for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
          var chip = _c.value;
          chip.destroy();
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      this.unlisten(INTERACTION_EVENT, this.handleChipInteraction);
      this.unlisten(SELECTION_EVENT, this.handleChipSelection);
      this.unlisten(REMOVAL_EVENT, this.handleChipRemoval);
      this.unlisten(NAVIGATION_EVENT, this.handleChipNavigation);
      _super.prototype.destroy.call(this);
    };
    MDCChipSet3.prototype.addChip = function(chipEl) {
      chipEl.id = chipEl.id || "mdc-chip-" + ++idCounter;
      this.chipsList.push(this.chipFactory(chipEl));
    };
    MDCChipSet3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        announceMessage: function(message) {
          announce(message);
        },
        focusChipPrimaryActionAtIndex: function(index) {
          _this.chipsList[index].focusPrimaryAction();
        },
        focusChipTrailingActionAtIndex: function(index) {
          _this.chipsList[index].focusTrailingAction();
        },
        getChipListCount: function() {
          return _this.chips.length;
        },
        getIndexOfChipById: function(chipId) {
          return _this.findChipIndex(chipId);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        isRTL: function() {
          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
        },
        removeChipAtIndex: function(index) {
          if (index >= 0 && index < _this.chips.length) {
            _this.chipsList[index].destroy();
            _this.chipsList[index].remove();
            _this.chipsList.splice(index, 1);
          }
        },
        removeFocusFromChipAtIndex: function(index) {
          _this.chipsList[index].removeFocus();
        },
        selectChipAtIndex: function(index, selected, shouldNotifyClients) {
          if (index >= 0 && index < _this.chips.length) {
            _this.chipsList[index].setSelectedFromChipSet(selected, shouldNotifyClients);
          }
        }
      };
      return new MDCChipSetFoundation2(adapter);
    };
    MDCChipSet3.prototype.instantiateChips = function(chipFactory) {
      var chipElements = [].slice.call(this.root.querySelectorAll(CHIP_SELECTOR));
      return chipElements.map(function(el) {
        el.id = el.id || "mdc-chip-" + ++idCounter;
        return chipFactory(el);
      });
    };
    MDCChipSet3.prototype.findChipIndex = function(chipId) {
      for (var i = 0; i < this.chips.length; i++) {
        if (this.chipsList[i].id === chipId) {
          return i;
        }
      }
      return -1;
    };
    return MDCChipSet3;
  }(MDCComponent)
);

export {
  MDCChipActionCssClasses,
  MDCChipActionInteractionTrigger,
  MDCChipActionType,
  MDCChipActionEvents,
  MDCChipActionFocusBehavior,
  MDCChipActionAttributes,
  MDCChipActionFoundation,
  MDCChipPrimaryActionFoundation,
  MDCChipTrailingActionFoundation,
  MDCChipAction,
  MDCChipCssClasses,
  MDCChipEvents,
  MDCChipAttributes,
  MDCChipAnimation,
  MDCChipFoundation,
  MDCChip,
  MDCChipSetAttributes,
  MDCChipSetCssClasses,
  MDCChipSetEvents,
  MDCChipSetFoundation,
  MDCChipSet,
  deprecated_exports
};
/*! Bundled license information:

@material/chips/action/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/component-ripple.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/primary-foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/trailing-foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/animation/animationframe.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dom/announce.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
*/
//# sourceMappingURL=chunk-OJIEB3RT.js.map
