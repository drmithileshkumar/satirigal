import {
  dist_default
} from "./chunk-RFVT3V65.js";
import "./chunk-CTXZTH3U.js";
import {
  CommonIcon_default,
  CommonLabel_default,
  SmuiElement_default
} from "./chunk-ZRO6H3MF.js";
import {
  classMap,
  forwardEventsBuilder
} from "./chunk-SJMHMZA4.js";
import "./chunk-6A2TAOKG.js";
import "./chunk-W4OU4FMO.js";
import "./chunk-Q6FUYFY3.js";
import "./chunk-LM6G6BDY.js";
import "./chunk-I52LNARA.js";
import "./chunk-N2TCLGKF.js";
import "./chunk-7TL3QSXI.js";
import "./chunk-E3PZ3JEK.js";
import "./chunk-E6ZP6LG5.js";
import {
  SvelteComponentDev,
  add_location,
  assign,
  attr_dev,
  binding_callbacks,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  compute_rest_props,
  construct_svelte_component_dev,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  group_outros,
  init,
  insert_hydration_dev,
  mount_component,
  safe_not_equal,
  setContext,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-RVLVW3YK.js";
import "./chunk-5WWUZCGV.js";

// node_modules/@smui/fab/dist/Fab.svelte
var file = "node_modules\\@smui\\fab\\dist\\Fab.svelte";
function create_if_block_1(ctx) {
  let div;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-fab__focus-ring");
      add_location(div, file, 37, 17, 787);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(38:2) {#if focusRing}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let div;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-fab__touch");
      add_location(div, file, 38, 21, 849);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(39:10) {#if touch}",
    ctx
  });
  return block;
}
function create_default_slot(ctx) {
  let div;
  let t0;
  let t1;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*focusRing*/
    ctx[4] && create_if_block_1(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[22].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[24],
    null
  );
  let if_block1 = (
    /*touch*/
    ctx[9] && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      div = element("div");
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (default_slot)
        default_slot.c();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      t0 = claim_space(nodes);
      if (if_block0)
        if_block0.l(nodes);
      t1 = claim_space(nodes);
      if (default_slot)
        default_slot.l(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-fab__ripple");
      add_location(div, file, 36, 3, 738);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      insert_hydration_dev(target, t0, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert_hydration_dev(target, t1, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration_dev(target, if_block1_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (
        /*focusRing*/
        ctx2[4]
      ) {
        if (if_block0) {
        } else {
          if_block0 = create_if_block_1(ctx2);
          if_block0.c();
          if_block0.m(t1.parentNode, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16777216)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[24],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[24]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[24],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*touch*/
        ctx2[9]
      ) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      if (detaching)
        detach_dev(t0);
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach_dev(t1);
      if (default_slot)
        default_slot.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach_dev(if_block1_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-fab': true,     'mdc-fab--mini': mini,     'mdc-fab--exited': exited,     'mdc-fab--extended': extended,     'smui-fab--color-primary': color === 'primary',     'mdc-fab--touch': touch,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {href}   {...$$restProps}   >",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    { tag: (
      /*tag*/
      ctx[12]
    ) },
    {
      use: [
        [
          dist_default,
          {
            ripple: (
              /*ripple*/
              ctx[3]
            ),
            unbounded: false,
            color: (
              /*color*/
              ctx[5]
            ),
            disabled: !!/*$$restProps*/
            ctx[20].disabled,
            addClass: (
              /*addClass*/
              ctx[17]
            ),
            removeClass: (
              /*removeClass*/
              ctx[18]
            ),
            addStyle: (
              /*addStyle*/
              ctx[19]
            )
          }
        ],
        /*forwardEvents*/
        ctx[16],
        .../*use*/
        ctx[0]
      ]
    },
    {
      class: classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-fab": true,
        "mdc-fab--mini": (
          /*mini*/
          ctx[6]
        ),
        "mdc-fab--exited": (
          /*exited*/
          ctx[7]
        ),
        "mdc-fab--extended": (
          /*extended*/
          ctx[8]
        ),
        "smui-fab--color-primary": (
          /*color*/
          ctx[5] === "primary"
        ),
        "mdc-fab--touch": (
          /*touch*/
          ctx[9]
        ),
        .../*internalClasses*/
        ctx[14]
      })
    },
    {
      style: Object.entries(
        /*internalStyles*/
        ctx[15]
      ).map(func).concat([
        /*style*/
        ctx[2]
      ]).join(" ")
    },
    { href: (
      /*href*/
      ctx[10]
    ) },
    /*$$restProps*/
    ctx[20]
  ];
  var switch_value = (
    /*component*/
    ctx[11]
  );
  function switch_props(ctx2) {
    let switch_instance_props = {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx: ctx2 }
    };
    for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
      switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    }
    return {
      props: switch_instance_props,
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    ctx[23](switch_instance);
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l: function claim(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const switch_instance_changes = dirty & /*tag, Ripple, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, classMap, className, mini, exited, extended, touch, internalClasses, Object, internalStyles, style, href*/
      2086895 ? get_spread_update(switch_instance_spread_levels, [
        dirty & /*tag*/
        4096 && { tag: (
          /*tag*/
          ctx2[12]
        ) },
        dirty & /*Ripple, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/
        2031657 && {
          use: [
            [
              dist_default,
              {
                ripple: (
                  /*ripple*/
                  ctx2[3]
                ),
                unbounded: false,
                color: (
                  /*color*/
                  ctx2[5]
                ),
                disabled: !!/*$$restProps*/
                ctx2[20].disabled,
                addClass: (
                  /*addClass*/
                  ctx2[17]
                ),
                removeClass: (
                  /*removeClass*/
                  ctx2[18]
                ),
                addStyle: (
                  /*addStyle*/
                  ctx2[19]
                )
              }
            ],
            /*forwardEvents*/
            ctx2[16],
            .../*use*/
            ctx2[0]
          ]
        },
        dirty & /*classMap, className, mini, exited, extended, color, touch, internalClasses*/
        17378 && {
          class: classMap({
            [
              /*className*/
              ctx2[1]
            ]: true,
            "mdc-fab": true,
            "mdc-fab--mini": (
              /*mini*/
              ctx2[6]
            ),
            "mdc-fab--exited": (
              /*exited*/
              ctx2[7]
            ),
            "mdc-fab--extended": (
              /*extended*/
              ctx2[8]
            ),
            "smui-fab--color-primary": (
              /*color*/
              ctx2[5] === "primary"
            ),
            "mdc-fab--touch": (
              /*touch*/
              ctx2[9]
            ),
            .../*internalClasses*/
            ctx2[14]
          })
        },
        dirty & /*Object, internalStyles, style*/
        32772 && {
          style: Object.entries(
            /*internalStyles*/
            ctx2[15]
          ).map(func).concat([
            /*style*/
            ctx2[2]
          ]).join(" ")
        },
        dirty & /*href*/
        1024 && { href: (
          /*href*/
          ctx2[10]
        ) },
        dirty & /*$$restProps*/
        1048576 && get_spread_object(
          /*$$restProps*/
          ctx2[20]
        )
      ]) : {};
      if (dirty & /*$$scope, touch, focusRing*/
      16777744) {
        switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (dirty & /*component*/
      2048 && switch_value !== (switch_value = /*component*/
      ctx2[11])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2));
          ctx2[23](switch_instance);
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[23](null);
      if (detaching)
        detach_dev(switch_instance_anchor);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var func = ([name, value]) => `${name}: ${value};`;
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "style",
    "ripple",
    "focusRing",
    "color",
    "mini",
    "exited",
    "extended",
    "touch",
    "href",
    "component",
    "tag",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Fab", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { ripple = true } = $$props;
  let { focusRing = false } = $$props;
  let { color = "secondary" } = $$props;
  let { mini = false } = $$props;
  let { exited = false } = $$props;
  let { extended = false } = $$props;
  let { touch = false } = $$props;
  let { href = void 0 } = $$props;
  let element2;
  let internalClasses = {};
  let internalStyles = {};
  let { component = SmuiElement_default } = $$props;
  let { tag = component === SmuiElement_default ? href == null ? "button" : "a" : void 0 } = $$props;
  setContext("SMUI:label:context", "fab");
  setContext("SMUI:icon:context", "fab");
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(14, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(14, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value) {
    if (internalStyles[name] != value) {
      if (value === "" || value == null) {
        delete internalStyles[name];
        $$invalidate(15, internalStyles);
      } else {
        $$invalidate(15, internalStyles[name] = value, internalStyles);
      }
    }
  }
  function getElement() {
    return element2.getElement();
  }
  function switch_instance_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(13, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(2, style = $$new_props.style);
    if ("ripple" in $$new_props)
      $$invalidate(3, ripple = $$new_props.ripple);
    if ("focusRing" in $$new_props)
      $$invalidate(4, focusRing = $$new_props.focusRing);
    if ("color" in $$new_props)
      $$invalidate(5, color = $$new_props.color);
    if ("mini" in $$new_props)
      $$invalidate(6, mini = $$new_props.mini);
    if ("exited" in $$new_props)
      $$invalidate(7, exited = $$new_props.exited);
    if ("extended" in $$new_props)
      $$invalidate(8, extended = $$new_props.extended);
    if ("touch" in $$new_props)
      $$invalidate(9, touch = $$new_props.touch);
    if ("href" in $$new_props)
      $$invalidate(10, href = $$new_props.href);
    if ("component" in $$new_props)
      $$invalidate(11, component = $$new_props.component);
    if ("tag" in $$new_props)
      $$invalidate(12, tag = $$new_props.tag);
    if ("$$scope" in $$new_props)
      $$invalidate(24, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    setContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    Ripple: dist_default,
    SmuiElement: SmuiElement_default,
    forwardEvents,
    use,
    className,
    style,
    ripple,
    focusRing,
    color,
    mini,
    exited,
    extended,
    touch,
    href,
    element: element2,
    internalClasses,
    internalStyles,
    component,
    tag,
    addClass,
    removeClass,
    addStyle,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("style" in $$props)
      $$invalidate(2, style = $$new_props.style);
    if ("ripple" in $$props)
      $$invalidate(3, ripple = $$new_props.ripple);
    if ("focusRing" in $$props)
      $$invalidate(4, focusRing = $$new_props.focusRing);
    if ("color" in $$props)
      $$invalidate(5, color = $$new_props.color);
    if ("mini" in $$props)
      $$invalidate(6, mini = $$new_props.mini);
    if ("exited" in $$props)
      $$invalidate(7, exited = $$new_props.exited);
    if ("extended" in $$props)
      $$invalidate(8, extended = $$new_props.extended);
    if ("touch" in $$props)
      $$invalidate(9, touch = $$new_props.touch);
    if ("href" in $$props)
      $$invalidate(10, href = $$new_props.href);
    if ("element" in $$props)
      $$invalidate(13, element2 = $$new_props.element);
    if ("internalClasses" in $$props)
      $$invalidate(14, internalClasses = $$new_props.internalClasses);
    if ("internalStyles" in $$props)
      $$invalidate(15, internalStyles = $$new_props.internalStyles);
    if ("component" in $$props)
      $$invalidate(11, component = $$new_props.component);
    if ("tag" in $$props)
      $$invalidate(12, tag = $$new_props.tag);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    use,
    className,
    style,
    ripple,
    focusRing,
    color,
    mini,
    exited,
    extended,
    touch,
    href,
    component,
    tag,
    element2,
    internalClasses,
    internalStyles,
    forwardEvents,
    addClass,
    removeClass,
    addStyle,
    $$restProps,
    getElement,
    slots,
    switch_instance_binding,
    $$scope
  ];
}
var Fab = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      style: 2,
      ripple: 3,
      focusRing: 4,
      color: 5,
      mini: 6,
      exited: 7,
      extended: 8,
      touch: 9,
      href: 10,
      component: 11,
      tag: 12,
      getElement: 21
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Fab",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get style() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set style(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ripple() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ripple(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get focusRing() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set focusRing(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get mini() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set mini(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get exited() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set exited(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get extended() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set extended(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get touch() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set touch(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get href() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set href(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get component() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set component(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get tag() {
    throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set tag(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[21];
  }
  set getElement(value) {
    throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Fab_default = Fab;

// node_modules/@smui/fab/dist/index.js
var dist_default2 = Fab_default;
export {
  CommonIcon_default as Icon,
  CommonLabel_default as Label,
  dist_default2 as default
};
//# sourceMappingURL=@smui_fab.js.map
